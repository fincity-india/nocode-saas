/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;

import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityClientPasswordPolicyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityClientPasswordPolicy extends TableImpl<SecurityClientPasswordPolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_client_password_policy</code>
     */
    public static final SecurityClientPasswordPolicy SECURITY_CLIENT_PASSWORD_POLICY = new SecurityClientPasswordPolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityClientPasswordPolicyRecord> getRecordType() {
        return SecurityClientPasswordPolicyRecord.class;
    }

    /**
     * The column <code>security.security_client_password_policy.ID</code>.
     * Primary key
     */
    public final TableField<SecurityClientPasswordPolicyRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>security.security_client_password_policy.CLIENT_ID</code>. Client
     * ID
     */
    public final TableField<SecurityClientPasswordPolicyRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column
     * <code>security.security_client_password_policy.ATLEAST_ONE_UPPERCASE</code>.
     * Atleast one uppercase letter
     */
    public final TableField<SecurityClientPasswordPolicyRecord, Byte> ATLEAST_ONE_UPPERCASE = createField(DSL.name("ATLEAST_ONE_UPPERCASE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Atleast one uppercase letter");

    /**
     * The column
     * <code>security.security_client_password_policy.ATLEAST_ONE_LOWERCASE</code>.
     * Atleast one lowercase letter
     */
    public final TableField<SecurityClientPasswordPolicyRecord, Byte> ATLEAST_ONE_LOWERCASE = createField(DSL.name("ATLEAST_ONE_LOWERCASE"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Atleast one lowercase letter");

    /**
     * The column
     * <code>security.security_client_password_policy.ATLEAST_ONE_DIGIT</code>.
     * Atleast one digit
     */
    public final TableField<SecurityClientPasswordPolicyRecord, Byte> ATLEAST_ONE_DIGIT = createField(DSL.name("ATLEAST_ONE_DIGIT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Atleast one digit");

    /**
     * The column
     * <code>security.security_client_password_policy.ATLEAST_ONE_SPECIAL_CHAR</code>.
     * Atleast one special characters
     */
    public final TableField<SecurityClientPasswordPolicyRecord, Byte> ATLEAST_ONE_SPECIAL_CHAR = createField(DSL.name("ATLEAST_ONE_SPECIAL_CHAR"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "Atleast one special characters");

    /**
     * The column
     * <code>security.security_client_password_policy.SPACES_ALLOWED</code>.
     * Spaces are allowed
     */
    public final TableField<SecurityClientPasswordPolicyRecord, Byte> SPACES_ALLOWED = createField(DSL.name("SPACES_ALLOWED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Spaces are allowed");

    /**
     * The column <code>security.security_client_password_policy.REGEX</code>.
     * Matching regular expression
     */
    public final TableField<SecurityClientPasswordPolicyRecord, String> REGEX = createField(DSL.name("REGEX"), SQLDataType.VARCHAR(512), this, "Matching regular expression");

    /**
     * The column
     * <code>security.security_client_password_policy.PERCENTAGE_NAME_MATCH</code>.
     * Percent that first and last name matching
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PERCENTAGE_NAME_MATCH = createField(DSL.name("PERCENTAGE_NAME_MATCH"), SQLDataType.SMALLINTUNSIGNED, this, "Percent that first and last name matching");

    /**
     * The column
     * <code>security.security_client_password_policy.PASS_EXPIRY_IN_DAYS</code>.
     * Expiry of password in days
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PASS_EXPIRY_IN_DAYS = createField(DSL.name("PASS_EXPIRY_IN_DAYS"), SQLDataType.SMALLINTUNSIGNED, this, "Expiry of password in days");

    /**
     * The column
     * <code>security.security_client_password_policy.PASS_EXPIRY_WARN_IN_DAYS</code>.
     * Password expiration warning in days
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PASS_EXPIRY_WARN_IN_DAYS = createField(DSL.name("PASS_EXPIRY_WARN_IN_DAYS"), SQLDataType.SMALLINTUNSIGNED, this, "Password expiration warning in days");

    /**
     * The column
     * <code>security.security_client_password_policy.PASS_MIN_LENGTH</code>.
     * Minimum Length for the password
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PASS_MIN_LENGTH = createField(DSL.name("PASS_MIN_LENGTH"), SQLDataType.SMALLINTUNSIGNED, this, "Minimum Length for the password");

    /**
     * The column
     * <code>security.security_client_password_policy.PASS_MAX_LENGTH</code>.
     * Maximum Length for the password
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PASS_MAX_LENGTH = createField(DSL.name("PASS_MAX_LENGTH"), SQLDataType.SMALLINTUNSIGNED, this, "Maximum Length for the password");

    /**
     * The column
     * <code>security.security_client_password_policy.NO_FAILED_ATTEMPTS</code>.
     * No of continuous attempts of authentication with wrong password
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> NO_FAILED_ATTEMPTS = createField(DSL.name("NO_FAILED_ATTEMPTS"), SQLDataType.SMALLINTUNSIGNED, this, "No of continuous attempts of authentication with wrong password");

    /**
     * The column
     * <code>security.security_client_password_policy.PASS_HISTORY_COUNT</code>.
     * Remember how many passwords
     */
    public final TableField<SecurityClientPasswordPolicyRecord, UShort> PASS_HISTORY_COUNT = createField(DSL.name("PASS_HISTORY_COUNT"), SQLDataType.SMALLINTUNSIGNED, this, "Remember how many passwords");

    /**
     * The column
     * <code>security.security_client_password_policy.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityClientPasswordPolicyRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>security.security_client_password_policy.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityClientPasswordPolicyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is created");

    /**
     * The column
     * <code>security.security_client_password_policy.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<SecurityClientPasswordPolicyRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>security.security_client_password_policy.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<SecurityClientPasswordPolicyRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is updated");

    private SecurityClientPasswordPolicy(Name alias, Table<SecurityClientPasswordPolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityClientPasswordPolicy(Name alias, Table<SecurityClientPasswordPolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_client_password_policy</code>
     * table reference
     */
    public SecurityClientPasswordPolicy(String alias) {
        this(DSL.name(alias), SECURITY_CLIENT_PASSWORD_POLICY);
    }

    /**
     * Create an aliased <code>security.security_client_password_policy</code>
     * table reference
     */
    public SecurityClientPasswordPolicy(Name alias) {
        this(alias, SECURITY_CLIENT_PASSWORD_POLICY);
    }

    /**
     * Create a <code>security.security_client_password_policy</code> table
     * reference
     */
    public SecurityClientPasswordPolicy() {
        this(DSL.name("security_client_password_policy"), null);
    }

    public <O extends Record> SecurityClientPasswordPolicy(Table<O> child, ForeignKey<O, SecurityClientPasswordPolicyRecord> key) {
        super(child, key, SECURITY_CLIENT_PASSWORD_POLICY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityClientPasswordPolicyRecord, ULong> getIdentity() {
        return (Identity<SecurityClientPasswordPolicyRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityClientPasswordPolicyRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_CLIENT_PASSWORD_POLICY_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityClientPasswordPolicyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_CLIENT_PASSWORD_POLICY_UK1_CLIENT_PWD_POL_ID);
    }

    @Override
    public List<ForeignKey<SecurityClientPasswordPolicyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_CLIENT_PWD_POL_CLIENT_ID);
    }

    private transient SecurityClient _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_CLIENT_PWD_POL_CLIENT_ID);

        return _securityClient;
    }

    @Override
    public SecurityClientPasswordPolicy as(String alias) {
        return new SecurityClientPasswordPolicy(DSL.name(alias), this);
    }

    @Override
    public SecurityClientPasswordPolicy as(Name alias) {
        return new SecurityClientPasswordPolicy(alias, this);
    }

    @Override
    public SecurityClientPasswordPolicy as(Table<?> alias) {
        return new SecurityClientPasswordPolicy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientPasswordPolicy rename(String name) {
        return new SecurityClientPasswordPolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientPasswordPolicy rename(Name name) {
        return new SecurityClientPasswordPolicy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientPasswordPolicy rename(Table<?> name) {
        return new SecurityClientPasswordPolicy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<ULong, ULong, Byte, Byte, Byte, Byte, Byte, String, UShort, UShort, UShort, UShort, UShort, UShort, UShort, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super ULong, ? super ULong, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super String, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super ULong, ? super ULong, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super String, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super UShort, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
