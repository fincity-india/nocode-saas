/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityPackageRoleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityPackageRole extends TableImpl<SecurityPackageRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_package_role</code>
     */
    public static final SecurityPackageRole SECURITY_PACKAGE_ROLE = new SecurityPackageRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityPackageRoleRecord> getRecordType() {
        return SecurityPackageRoleRecord.class;
    }

    /**
     * The column <code>security.security_package_role.ID</code>. Primary key
     */
    public final TableField<SecurityPackageRoleRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_package_role.PACKAGE_ID</code>.
     * Package ID
     */
    public final TableField<SecurityPackageRoleRecord, ULong> PACKAGE_ID = createField(DSL.name("PACKAGE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Package ID");

    /**
     * The column <code>security.security_package_role.ROLE_ID</code>. Role ID
     */
    public final TableField<SecurityPackageRoleRecord, ULong> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Role ID");

    private SecurityPackageRole(Name alias, Table<SecurityPackageRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityPackageRole(Name alias, Table<SecurityPackageRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_package_role</code> table
     * reference
     */
    public SecurityPackageRole(String alias) {
        this(DSL.name(alias), SECURITY_PACKAGE_ROLE);
    }

    /**
     * Create an aliased <code>security.security_package_role</code> table
     * reference
     */
    public SecurityPackageRole(Name alias) {
        this(alias, SECURITY_PACKAGE_ROLE);
    }

    /**
     * Create a <code>security.security_package_role</code> table reference
     */
    public SecurityPackageRole() {
        this(DSL.name("security_package_role"), null);
    }

    public <O extends Record> SecurityPackageRole(Table<O> child, ForeignKey<O, SecurityPackageRoleRecord> key) {
        super(child, key, SECURITY_PACKAGE_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityPackageRoleRecord, ULong> getIdentity() {
        return (Identity<SecurityPackageRoleRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityPackageRoleRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_PACKAGE_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityPackageRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_PACKAGE_ROLE_UK1_PACKAGE_ROLE);
    }

    @Override
    public List<ForeignKey<SecurityPackageRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK2_PACKAGE_ROLE_PACKAGE_ID, Keys.FK1_PACKAGE_ROLE_ROLE_ID);
    }

    private transient SecurityPackage _securityPackage;
    private transient SecurityRole _securityRole;

    /**
     * Get the implicit join path to the <code>security.security_package</code>
     * table.
     */
    public SecurityPackage securityPackage() {
        if (_securityPackage == null)
            _securityPackage = new SecurityPackage(this, Keys.FK2_PACKAGE_ROLE_PACKAGE_ID);

        return _securityPackage;
    }

    /**
     * Get the implicit join path to the <code>security.security_role</code>
     * table.
     */
    public SecurityRole securityRole() {
        if (_securityRole == null)
            _securityRole = new SecurityRole(this, Keys.FK1_PACKAGE_ROLE_ROLE_ID);

        return _securityRole;
    }

    @Override
    public SecurityPackageRole as(String alias) {
        return new SecurityPackageRole(DSL.name(alias), this);
    }

    @Override
    public SecurityPackageRole as(Name alias) {
        return new SecurityPackageRole(alias, this);
    }

    @Override
    public SecurityPackageRole as(Table<?> alias) {
        return new SecurityPackageRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackageRole rename(String name) {
        return new SecurityPackageRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackageRole rename(Name name) {
        return new SecurityPackageRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityPackageRole rename(Table<?> name) {
        return new SecurityPackageRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
