/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityClientManageRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityClientManage extends TableImpl<SecurityClientManageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_client_manage</code>
     */
    public static final SecurityClientManage SECURITY_CLIENT_MANAGE = new SecurityClientManage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityClientManageRecord> getRecordType() {
        return SecurityClientManageRecord.class;
    }

    /**
     * The column <code>security.security_client_manage.ID</code>. Primary key
     */
    public final TableField<SecurityClientManageRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_client_manage.CLIENT_ID</code>. Client
     * ID
     */
    public final TableField<SecurityClientManageRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_client_manage.MANAGE_CLIENT_ID</code>.
     * Client ID that manages this client
     */
    public final TableField<SecurityClientManageRecord, ULong> MANAGE_CLIENT_ID = createField(DSL.name("MANAGE_CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID that manages this client");

    private SecurityClientManage(Name alias, Table<SecurityClientManageRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityClientManage(Name alias, Table<SecurityClientManageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_client_manage</code> table
     * reference
     */
    public SecurityClientManage(String alias) {
        this(DSL.name(alias), SECURITY_CLIENT_MANAGE);
    }

    /**
     * Create an aliased <code>security.security_client_manage</code> table
     * reference
     */
    public SecurityClientManage(Name alias) {
        this(alias, SECURITY_CLIENT_MANAGE);
    }

    /**
     * Create a <code>security.security_client_manage</code> table reference
     */
    public SecurityClientManage() {
        this(DSL.name("security_client_manage"), null);
    }

    public <O extends Record> SecurityClientManage(Table<O> child, ForeignKey<O, SecurityClientManageRecord> key) {
        super(child, key, SECURITY_CLIENT_MANAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityClientManageRecord, ULong> getIdentity() {
        return (Identity<SecurityClientManageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityClientManageRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_CLIENT_MANAGE_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityClientManageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_CLIENT_MANAGE_CLIENT_ID, Keys.FK1_CLIENT_MANAGE_MNG_CLIENT_ID);
    }

    private transient SecurityClient _fk1ClientManageClientId;
    private transient SecurityClient _fk1ClientManageMngClientId;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_MANAGE_CLIENT_ID</code> key.
     */
    public SecurityClient fk1ClientManageClientId() {
        if (_fk1ClientManageClientId == null)
            _fk1ClientManageClientId = new SecurityClient(this, Keys.FK1_CLIENT_MANAGE_CLIENT_ID);

        return _fk1ClientManageClientId;
    }

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table, via the <code>FK1_CLIENT_MANAGE_MNG_CLIENT_ID</code> key.
     */
    public SecurityClient fk1ClientManageMngClientId() {
        if (_fk1ClientManageMngClientId == null)
            _fk1ClientManageMngClientId = new SecurityClient(this, Keys.FK1_CLIENT_MANAGE_MNG_CLIENT_ID);

        return _fk1ClientManageMngClientId;
    }

    @Override
    public SecurityClientManage as(String alias) {
        return new SecurityClientManage(DSL.name(alias), this);
    }

    @Override
    public SecurityClientManage as(Name alias) {
        return new SecurityClientManage(alias, this);
    }

    @Override
    public SecurityClientManage as(Table<?> alias) {
        return new SecurityClientManage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientManage rename(String name) {
        return new SecurityClientManage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientManage rename(Name name) {
        return new SecurityClientManage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientManage rename(Table<?> name) {
        return new SecurityClientManage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
