/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityAppUserRoleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityAppUserRole extends TableImpl<SecurityAppUserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_app_user_role</code>
     */
    public static final SecurityAppUserRole SECURITY_APP_USER_ROLE = new SecurityAppUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAppUserRoleRecord> getRecordType() {
        return SecurityAppUserRoleRecord.class;
    }

    /**
     * The column <code>security.security_app_user_role.ID</code>. Primary key
     */
    public final TableField<SecurityAppUserRoleRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_app_user_role.CLIENT_ID</code>. Client
     * ID for which this APP PACKAGE relation belongs to
     */
    public final TableField<SecurityAppUserRoleRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this APP PACKAGE relation belongs to");

    /**
     * The column <code>security.security_app_user_role.APP_ID</code>. App ID
     * for which this APP belongs to
     */
    public final TableField<SecurityAppUserRoleRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App ID for which this APP belongs to");

    /**
     * The column <code>security.security_app_user_role.ROLE_ID</code>. Role ID
     */
    public final TableField<SecurityAppUserRoleRecord, ULong> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Role ID");

    private SecurityAppUserRole(Name alias, Table<SecurityAppUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityAppUserRole(Name alias, Table<SecurityAppUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_app_user_role</code> table
     * reference
     */
    public SecurityAppUserRole(String alias) {
        this(DSL.name(alias), SECURITY_APP_USER_ROLE);
    }

    /**
     * Create an aliased <code>security.security_app_user_role</code> table
     * reference
     */
    public SecurityAppUserRole(Name alias) {
        this(alias, SECURITY_APP_USER_ROLE);
    }

    /**
     * Create a <code>security.security_app_user_role</code> table reference
     */
    public SecurityAppUserRole() {
        this(DSL.name("security_app_user_role"), null);
    }

    public <O extends Record> SecurityAppUserRole(Table<O> child, ForeignKey<O, SecurityAppUserRoleRecord> key) {
        super(child, key, SECURITY_APP_USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAppUserRoleRecord, ULong> getIdentity() {
        return (Identity<SecurityAppUserRoleRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAppUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_APP_USER_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityAppUserRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_APP_USER_ROLE_CLIENT_ID);
    }

    @Override
    public List<ForeignKey<SecurityAppUserRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_APP_UR_CLIENT_ID, Keys.FK2_APP_UR_APP_ID, Keys.FK3_APP_UR_ROLE_ID);
    }

    private transient SecurityClient _securityClient;
    private transient SecurityApp _securityApp;
    private transient SecurityRole _securityRole;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_APP_UR_CLIENT_ID);

        return _securityClient;
    }

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityApp securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityApp(this, Keys.FK2_APP_UR_APP_ID);

        return _securityApp;
    }

    /**
     * Get the implicit join path to the <code>security.security_role</code>
     * table.
     */
    public SecurityRole securityRole() {
        if (_securityRole == null)
            _securityRole = new SecurityRole(this, Keys.FK3_APP_UR_ROLE_ID);

        return _securityRole;
    }

    @Override
    public SecurityAppUserRole as(String alias) {
        return new SecurityAppUserRole(DSL.name(alias), this);
    }

    @Override
    public SecurityAppUserRole as(Name alias) {
        return new SecurityAppUserRole(alias, this);
    }

    @Override
    public SecurityAppUserRole as(Table<?> alias) {
        return new SecurityAppUserRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppUserRole rename(String name) {
        return new SecurityAppUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppUserRole rename(Name name) {
        return new SecurityAppUserRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppUserRole rename(Table<?> name) {
        return new SecurityAppUserRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, ULong, ULong, ULong> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
