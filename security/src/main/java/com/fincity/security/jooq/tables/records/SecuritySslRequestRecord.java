/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecuritySslRequest;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecuritySslRequestRecord extends UpdatableRecordImpl<SecuritySslRequestRecord> implements Record10<ULong, ULong, String, String, String, String, UInteger, String, ULong, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_ssl_request.ID</code>. Primary key
     */
    public SecuritySslRequestRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_ssl_request.URL_ID</code>. URL ID for
     * which this SSL certificate belongs to
     */
    public SecuritySslRequestRecord setUrlId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.URL_ID</code>. URL ID for
     * which this SSL certificate belongs to
     */
    public ULong getUrlId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_ssl_request.DOMAINS</code>. Domains
     * for which this SSL certificate is valid
     */
    public SecuritySslRequestRecord setDomains(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.DOMAINS</code>. Domains
     * for which this SSL certificate is valid
     */
    public String getDomains() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_ssl_request.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public SecuritySslRequestRecord setOrganization(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public String getOrganization() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_ssl_request.CRT_KEY</code>. SSL
     * certificate key
     */
    public SecuritySslRequestRecord setCrtKey(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.CRT_KEY</code>. SSL
     * certificate key
     */
    public String getCrtKey() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_ssl_request.CSR</code>. SSL
     * certificate signing request
     */
    public SecuritySslRequestRecord setCsr(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.CSR</code>. SSL
     * certificate signing request
     */
    public String getCsr() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_ssl_request.VALIDITY</code>. Validity
     * of the SSL certificate in months
     */
    public SecuritySslRequestRecord setValidity(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.VALIDITY</code>. Validity
     * of the SSL certificate in months
     */
    public UInteger getValidity() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>security.security_ssl_request.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public SecuritySslRequestRecord setFailedReason(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public String getFailedReason() {
        return (String) get(7);
    }

    /**
     * Setter for <code>security.security_ssl_request.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecuritySslRequestRecord setUpdatedBy(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>security.security_ssl_request.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecuritySslRequestRecord setUpdatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_request.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, ULong, String, String, String, String, UInteger, String, ULong, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<ULong, ULong, String, String, String, String, UInteger, String, ULong, LocalDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.ID;
    }

    @Override
    public Field<ULong> field2() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.URL_ID;
    }

    @Override
    public Field<String> field3() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.DOMAINS;
    }

    @Override
    public Field<String> field4() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.ORGANIZATION;
    }

    @Override
    public Field<String> field5() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.CRT_KEY;
    }

    @Override
    public Field<String> field6() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.CSR;
    }

    @Override
    public Field<UInteger> field7() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.VALIDITY;
    }

    @Override
    public Field<String> field8() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.FAILED_REASON;
    }

    @Override
    public Field<ULong> field9() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return SecuritySslRequest.SECURITY_SSL_REQUEST.UPDATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getUrlId();
    }

    @Override
    public String component3() {
        return getDomains();
    }

    @Override
    public String component4() {
        return getOrganization();
    }

    @Override
    public String component5() {
        return getCrtKey();
    }

    @Override
    public String component6() {
        return getCsr();
    }

    @Override
    public UInteger component7() {
        return getValidity();
    }

    @Override
    public String component8() {
        return getFailedReason();
    }

    @Override
    public ULong component9() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component10() {
        return getUpdatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getUrlId();
    }

    @Override
    public String value3() {
        return getDomains();
    }

    @Override
    public String value4() {
        return getOrganization();
    }

    @Override
    public String value5() {
        return getCrtKey();
    }

    @Override
    public String value6() {
        return getCsr();
    }

    @Override
    public UInteger value7() {
        return getValidity();
    }

    @Override
    public String value8() {
        return getFailedReason();
    }

    @Override
    public ULong value9() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value10() {
        return getUpdatedAt();
    }

    @Override
    public SecuritySslRequestRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value2(ULong value) {
        setUrlId(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value3(String value) {
        setDomains(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value4(String value) {
        setOrganization(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value5(String value) {
        setCrtKey(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value6(String value) {
        setCsr(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value7(UInteger value) {
        setValidity(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value8(String value) {
        setFailedReason(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value9(ULong value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord value10(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SecuritySslRequestRecord values(ULong value1, ULong value2, String value3, String value4, String value5, String value6, UInteger value7, String value8, ULong value9, LocalDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecuritySslRequestRecord
     */
    public SecuritySslRequestRecord() {
        super(SecuritySslRequest.SECURITY_SSL_REQUEST);
    }

    /**
     * Create a detached, initialised SecuritySslRequestRecord
     */
    public SecuritySslRequestRecord(ULong id, ULong urlId, String domains, String organization, String crtKey, String csr, UInteger validity, String failedReason, ULong updatedBy, LocalDateTime updatedAt) {
        super(SecuritySslRequest.SECURITY_SSL_REQUEST);

        setId(id);
        setUrlId(urlId);
        setDomains(domains);
        setOrganization(organization);
        setCrtKey(crtKey);
        setCsr(csr);
        setValidity(validity);
        setFailedReason(failedReason);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
