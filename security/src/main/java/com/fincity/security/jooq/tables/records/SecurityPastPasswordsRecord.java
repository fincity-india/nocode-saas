/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecurityPastPasswords;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityPastPasswordsRecord extends UpdatableRecordImpl<SecurityPastPasswordsRecord> implements Record6<ULong, ULong, String, Byte, ULong, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_past_passwords.ID</code>. Primary key
     */
    public SecurityPastPasswordsRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_past_passwords.USER_ID</code>. User ID
     */
    public SecurityPastPasswordsRecord setUserId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.USER_ID</code>. User ID
     */
    public ULong getUserId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_past_passwords.PASSWORD</code>.
     * Password message digested string
     */
    public SecurityPastPasswordsRecord setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.PASSWORD</code>.
     * Password message digested string
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>security.security_past_passwords.PASSWORD_HASHED</code>.
     * Password stored is hashed or not
     */
    public SecurityPastPasswordsRecord setPasswordHashed(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.PASSWORD_HASHED</code>.
     * Password stored is hashed or not
     */
    public Byte getPasswordHashed() {
        return (Byte) get(3);
    }

    /**
     * Setter for <code>security.security_past_passwords.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public SecurityPastPasswordsRecord setCreatedBy(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>security.security_past_passwords.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecurityPastPasswordsRecord setCreatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_past_passwords.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, ULong, String, Byte, ULong, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<ULong, ULong, String, Byte, ULong, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.ID;
    }

    @Override
    public Field<ULong> field2() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.PASSWORD;
    }

    @Override
    public Field<Byte> field4() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.PASSWORD_HASHED;
    }

    @Override
    public Field<ULong> field5() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return SecurityPastPasswords.SECURITY_PAST_PASSWORDS.CREATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public Byte component4() {
        return getPasswordHashed();
    }

    @Override
    public ULong component5() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public Byte value4() {
        return getPasswordHashed();
    }

    @Override
    public ULong value5() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public SecurityPastPasswordsRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord value2(ULong value) {
        setUserId(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord value4(Byte value) {
        setPasswordHashed(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord value5(ULong value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord value6(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SecurityPastPasswordsRecord values(ULong value1, ULong value2, String value3, Byte value4, ULong value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityPastPasswordsRecord
     */
    public SecurityPastPasswordsRecord() {
        super(SecurityPastPasswords.SECURITY_PAST_PASSWORDS);
    }

    /**
     * Create a detached, initialised SecurityPastPasswordsRecord
     */
    public SecurityPastPasswordsRecord(ULong id, ULong userId, String password, Byte passwordHashed, ULong createdBy, LocalDateTime createdAt) {
        super(SecurityPastPasswords.SECURITY_PAST_PASSWORDS);

        setId(id);
        setUserId(userId);
        setPassword(password);
        setPasswordHashed(passwordHashed);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
