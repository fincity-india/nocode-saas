/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.enums.SecuritySslChallengeChallengeType;
import com.fincity.security.jooq.enums.SecuritySslChallengeStatus;
import com.fincity.security.jooq.tables.SecuritySslChallenge;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecuritySslChallengeRecord extends UpdatableRecordImpl<SecuritySslChallengeRecord> implements Record12<ULong, ULong, SecuritySslChallengeChallengeType, String, String, String, SecuritySslChallengeStatus, String, LocalDateTime, UInteger, ULong, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_ssl_challenge.ID</code>. Primary key
     */
    public SecuritySslChallengeRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.REQUEST_ID</code>. SSL
     * request ID for which this challenge belongs to
     */
    public SecuritySslChallengeRecord setRequestId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.REQUEST_ID</code>. SSL
     * request ID for which this challenge belongs to
     */
    public ULong getRequestId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CHALLENGE_TYPE</code>.
     * Challenge type
     */
    public SecuritySslChallengeRecord setChallengeType(SecuritySslChallengeChallengeType value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CHALLENGE_TYPE</code>.
     * Challenge type
     */
    public SecuritySslChallengeChallengeType getChallengeType() {
        return (SecuritySslChallengeChallengeType) get(2);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.DOMAIN</code>. Domain
     * for which this challenge is valid
     */
    public SecuritySslChallengeRecord setDomain(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.DOMAIN</code>. Domain
     * for which this challenge is valid
     */
    public String getDomain() {
        return (String) get(3);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.TOKEN</code>. Challenge
     * token for HTTP-01 challenge/Challenge TXT record name for DNS-01
     * challenge
     */
    public SecuritySslChallengeRecord setToken(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.TOKEN</code>. Challenge
     * token for HTTP-01 challenge/Challenge TXT record name for DNS-01
     * challenge
     */
    public String getToken() {
        return (String) get(4);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.AUTHORIZATION</code>.
     * Challenge key authorization for HTTP-01 challenge/Digest for DNS-01
     * challenge
     */
    public SecuritySslChallengeRecord setAuthorization(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.AUTHORIZATION</code>.
     * Challenge key authorization for HTTP-01 challenge/Digest for DNS-01
     * challenge
     */
    public String getAuthorization() {
        return (String) get(5);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.STATUS</code>. Challenge
     * status
     */
    public SecuritySslChallengeRecord setStatus(SecuritySslChallengeStatus value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.STATUS</code>. Challenge
     * status
     */
    public SecuritySslChallengeStatus getStatus() {
        return (SecuritySslChallengeStatus) get(6);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public SecuritySslChallengeRecord setFailedReason(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.FAILED_REASON</code>.
     * Reason for challenge failure
     */
    public String getFailedReason() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>security.security_ssl_challenge.LAST_VALIDATED_AT</code>. Time when
     * this challenge is validated
     */
    public SecuritySslChallengeRecord setLastValidatedAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_ssl_challenge.LAST_VALIDATED_AT</code>. Time when
     * this challenge is validated
     */
    public LocalDateTime getLastValidatedAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.RETRY_COUNT</code>.
     * Number of times this challenge is retried
     */
    public SecuritySslChallengeRecord setRetryCount(UInteger value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.RETRY_COUNT</code>.
     * Number of times this challenge is retried
     */
    public UInteger getRetryCount() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public SecuritySslChallengeRecord setCreatedBy(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>security.security_ssl_challenge.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecuritySslChallengeRecord setCreatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>security.security_ssl_challenge.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, ULong, SecuritySslChallengeChallengeType, String, String, String, SecuritySslChallengeStatus, String, LocalDateTime, UInteger, ULong, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<ULong, ULong, SecuritySslChallengeChallengeType, String, String, String, SecuritySslChallengeStatus, String, LocalDateTime, UInteger, ULong, LocalDateTime> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.ID;
    }

    @Override
    public Field<ULong> field2() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.REQUEST_ID;
    }

    @Override
    public Field<SecuritySslChallengeChallengeType> field3() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.CHALLENGE_TYPE;
    }

    @Override
    public Field<String> field4() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.DOMAIN;
    }

    @Override
    public Field<String> field5() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.TOKEN;
    }

    @Override
    public Field<String> field6() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.AUTHORIZATION;
    }

    @Override
    public Field<SecuritySslChallengeStatus> field7() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.STATUS;
    }

    @Override
    public Field<String> field8() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.FAILED_REASON;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.LAST_VALIDATED_AT;
    }

    @Override
    public Field<UInteger> field10() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.RETRY_COUNT;
    }

    @Override
    public Field<ULong> field11() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return SecuritySslChallenge.SECURITY_SSL_CHALLENGE.CREATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getRequestId();
    }

    @Override
    public SecuritySslChallengeChallengeType component3() {
        return getChallengeType();
    }

    @Override
    public String component4() {
        return getDomain();
    }

    @Override
    public String component5() {
        return getToken();
    }

    @Override
    public String component6() {
        return getAuthorization();
    }

    @Override
    public SecuritySslChallengeStatus component7() {
        return getStatus();
    }

    @Override
    public String component8() {
        return getFailedReason();
    }

    @Override
    public LocalDateTime component9() {
        return getLastValidatedAt();
    }

    @Override
    public UInteger component10() {
        return getRetryCount();
    }

    @Override
    public ULong component11() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component12() {
        return getCreatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getRequestId();
    }

    @Override
    public SecuritySslChallengeChallengeType value3() {
        return getChallengeType();
    }

    @Override
    public String value4() {
        return getDomain();
    }

    @Override
    public String value5() {
        return getToken();
    }

    @Override
    public String value6() {
        return getAuthorization();
    }

    @Override
    public SecuritySslChallengeStatus value7() {
        return getStatus();
    }

    @Override
    public String value8() {
        return getFailedReason();
    }

    @Override
    public LocalDateTime value9() {
        return getLastValidatedAt();
    }

    @Override
    public UInteger value10() {
        return getRetryCount();
    }

    @Override
    public ULong value11() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value12() {
        return getCreatedAt();
    }

    @Override
    public SecuritySslChallengeRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value2(ULong value) {
        setRequestId(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value3(SecuritySslChallengeChallengeType value) {
        setChallengeType(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value4(String value) {
        setDomain(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value5(String value) {
        setToken(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value6(String value) {
        setAuthorization(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value7(SecuritySslChallengeStatus value) {
        setStatus(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value8(String value) {
        setFailedReason(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value9(LocalDateTime value) {
        setLastValidatedAt(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value10(UInteger value) {
        setRetryCount(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value11(ULong value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord value12(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SecuritySslChallengeRecord values(ULong value1, ULong value2, SecuritySslChallengeChallengeType value3, String value4, String value5, String value6, SecuritySslChallengeStatus value7, String value8, LocalDateTime value9, UInteger value10, ULong value11, LocalDateTime value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecuritySslChallengeRecord
     */
    public SecuritySslChallengeRecord() {
        super(SecuritySslChallenge.SECURITY_SSL_CHALLENGE);
    }

    /**
     * Create a detached, initialised SecuritySslChallengeRecord
     */
    public SecuritySslChallengeRecord(ULong id, ULong requestId, SecuritySslChallengeChallengeType challengeType, String domain, String token, String authorization, SecuritySslChallengeStatus status, String failedReason, LocalDateTime lastValidatedAt, UInteger retryCount, ULong createdBy, LocalDateTime createdAt) {
        super(SecuritySslChallenge.SECURITY_SSL_CHALLENGE);

        setId(id);
        setRequestId(requestId);
        setChallengeType(challengeType);
        setDomain(domain);
        setToken(token);
        setAuthorization(authorization);
        setStatus(status);
        setFailedReason(failedReason);
        setLastValidatedAt(lastValidatedAt);
        setRetryCount(retryCount);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
