/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Indexes;
import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.enums.SecurityUserStatusCode;
import com.fincity.security.jooq.tables.records.SecurityUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityUser extends TableImpl<SecurityUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user</code>
     */
    public static final SecurityUser SECURITY_USER = new SecurityUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserRecord> getRecordType() {
        return SecurityUserRecord.class;
    }

    /**
     * The column <code>security.security_user.ID</code>. Primary key
     */
    public final TableField<SecurityUserRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user.CLIENT_ID</code>. Client ID for
     * which this user belongs to
     */
    public final TableField<SecurityUserRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID for which this user belongs to");

    /**
     * The column <code>security.security_user.USER_NAME</code>. User Name to
     * login
     */
    public final TableField<SecurityUserRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.CHAR)), this, "User Name to login");

    /**
     * The column <code>security.security_user.EMAIL_ID</code>. Email ID to
     * login
     */
    public final TableField<SecurityUserRecord, String> EMAIL_ID = createField(DSL.name("EMAIL_ID"), SQLDataType.VARCHAR(320).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.VARCHAR)), this, "Email ID to login");

    /**
     * The column <code>security.security_user.PHONE_NUMBER</code>. Phone Number
     * to login
     */
    public final TableField<SecurityUserRecord, String> PHONE_NUMBER = createField(DSL.name("PHONE_NUMBER"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("NONE", SQLDataType.CHAR)), this, "Phone Number to login");

    /**
     * The column <code>security.security_user.FIRST_NAME</code>. First name
     */
    public final TableField<SecurityUserRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(128), this, "First name");

    /**
     * The column <code>security.security_user.LAST_NAME</code>. Last name
     */
    public final TableField<SecurityUserRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(128), this, "Last name");

    /**
     * The column <code>security.security_user.DESIGNATION</code>. Designation
     */
    public final TableField<SecurityUserRecord, String> DESIGNATION = createField(DSL.name("DESIGNATION"), SQLDataType.VARCHAR(256), this, "Designation");

    /**
     * The column <code>security.security_user.MIDDLE_NAME</code>. Middle name
     */
    public final TableField<SecurityUserRecord, String> MIDDLE_NAME = createField(DSL.name("MIDDLE_NAME"), SQLDataType.VARCHAR(128), this, "Middle name");

    /**
     * The column <code>security.security_user.LOCALE_CODE</code>. User's Locale
     */
    public final TableField<SecurityUserRecord, String> LOCALE_CODE = createField(DSL.name("LOCALE_CODE"), SQLDataType.VARCHAR(10).defaultValue(DSL.inline("en-US", SQLDataType.VARCHAR)), this, "User's Locale");

    /**
     * The column <code>security.security_user.PASSWORD</code>. Password message
     * digested string
     */
    public final TableField<SecurityUserRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(512), this, "Password message digested string");

    /**
     * The column <code>security.security_user.PASSWORD_HASHED</code>. Password
     * stored is hashed or not
     */
    public final TableField<SecurityUserRecord, Byte> PASSWORD_HASHED = createField(DSL.name("PASSWORD_HASHED"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Password stored is hashed or not");

    /**
     * The column <code>security.security_user.ACCOUNT_NON_EXPIRED</code>. If
     * false, means user is expired
     */
    public final TableField<SecurityUserRecord, Byte> ACCOUNT_NON_EXPIRED = createField(DSL.name("ACCOUNT_NON_EXPIRED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If false, means user is expired");

    /**
     * The column <code>security.security_user.ACCOUNT_NON_LOCKED</code>. If
     * false, means user is locked
     */
    public final TableField<SecurityUserRecord, Byte> ACCOUNT_NON_LOCKED = createField(DSL.name("ACCOUNT_NON_LOCKED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If false, means user is locked");

    /**
     * The column <code>security.security_user.CREDENTIALS_NON_EXPIRED</code>.
     * If flase, password is expired
     */
    public final TableField<SecurityUserRecord, Byte> CREDENTIALS_NON_EXPIRED = createField(DSL.name("CREDENTIALS_NON_EXPIRED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "If flase, password is expired");

    /**
     * The column <code>security.security_user.NO_FAILED_ATTEMPT</code>. No of
     * failed attempts
     */
    public final TableField<SecurityUserRecord, Short> NO_FAILED_ATTEMPT = createField(DSL.name("NO_FAILED_ATTEMPT"), SQLDataType.SMALLINT.defaultValue(DSL.inline("0", SQLDataType.SMALLINT)), this, "No of failed attempts");

    /**
     * The column <code>security.security_user.STATUS_CODE</code>. Status of the
     * user
     */
    public final TableField<SecurityUserRecord, SecurityUserStatusCode> STATUS_CODE = createField(DSL.name("STATUS_CODE"), SQLDataType.VARCHAR(16).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(com.fincity.security.jooq.enums.SecurityUserStatusCode.class), this, "Status of the user");

    /**
     * The column <code>security.security_user.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public final TableField<SecurityUserRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_user.CREATED_AT</code>. Time when this
     * row is created
     */
    public final TableField<SecurityUserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_user.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public final TableField<SecurityUserRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_user.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public final TableField<SecurityUserRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityUser(Name alias, Table<SecurityUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityUser(Name alias, Table<SecurityUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_user</code> table reference
     */
    public SecurityUser(String alias) {
        this(DSL.name(alias), SECURITY_USER);
    }

    /**
     * Create an aliased <code>security.security_user</code> table reference
     */
    public SecurityUser(Name alias) {
        this(alias, SECURITY_USER);
    }

    /**
     * Create a <code>security.security_user</code> table reference
     */
    public SecurityUser() {
        this(DSL.name("security_user"), null);
    }

    public <O extends Record> SecurityUser(Table<O> child, ForeignKey<O, SecurityUserRecord> key) {
        super(child, key, SECURITY_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SECURITY_USER_K1_USER_NAME, Indexes.SECURITY_USER_K2_EMAIL_ID, Indexes.SECURITY_USER_K3_PHONE_NUMBER);
    }

    @Override
    public Identity<SecurityUserRecord, ULong> getIdentity() {
        return (Identity<SecurityUserRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_USER_UK1_USER_NAME);
    }

    @Override
    public List<ForeignKey<SecurityUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_USER_CLIENT_ID);
    }

    private transient SecurityClient _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_USER_CLIENT_ID);

        return _securityClient;
    }

    @Override
    public SecurityUser as(String alias) {
        return new SecurityUser(DSL.name(alias), this);
    }

    @Override
    public SecurityUser as(Name alias) {
        return new SecurityUser(alias, this);
    }

    @Override
    public SecurityUser as(Table<?> alias) {
        return new SecurityUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(String name) {
        return new SecurityUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(Name name) {
        return new SecurityUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUser rename(Table<?> name) {
        return new SecurityUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<ULong, ULong, String, String, String, String, String, String, String, String, String, Byte, Byte, Byte, Byte, Short, SecurityUserStatusCode, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super Short, ? super SecurityUserStatusCode, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super Byte, ? super Byte, ? super Byte, ? super Short, ? super SecurityUserStatusCode, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
