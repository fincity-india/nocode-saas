/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityClientTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityClientType extends TableImpl<SecurityClientTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_client_type</code>
     */
    public static final SecurityClientType SECURITY_CLIENT_TYPE = new SecurityClientType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityClientTypeRecord> getRecordType() {
        return SecurityClientTypeRecord.class;
    }

    /**
     * The column <code>security.security_client_type.ID</code>. Primary key
     */
    public final TableField<SecurityClientTypeRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_client_type.CODE</code>. Code
     */
    public final TableField<SecurityClientTypeRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.CHAR(4).nullable(false), this, "Code");

    /**
     * The column <code>security.security_client_type.TYPE</code>. Type
     */
    public final TableField<SecurityClientTypeRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(256).nullable(false), this, "Type");

    /**
     * The column <code>security.security_client_type.DESCRIPTION</code>.
     * Description of the client type
     */
    public final TableField<SecurityClientTypeRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Description of the client type");

    /**
     * The column <code>security.security_client_type.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityClientTypeRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_client_type.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityClientTypeRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is created");

    /**
     * The column <code>security.security_client_type.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<SecurityClientTypeRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_client_type.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<SecurityClientTypeRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is updated");

    private SecurityClientType(Name alias, Table<SecurityClientTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityClientType(Name alias, Table<SecurityClientTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_client_type</code> table
     * reference
     */
    public SecurityClientType(String alias) {
        this(DSL.name(alias), SECURITY_CLIENT_TYPE);
    }

    /**
     * Create an aliased <code>security.security_client_type</code> table
     * reference
     */
    public SecurityClientType(Name alias) {
        this(alias, SECURITY_CLIENT_TYPE);
    }

    /**
     * Create a <code>security.security_client_type</code> table reference
     */
    public SecurityClientType() {
        this(DSL.name("security_client_type"), null);
    }

    public <O extends Record> SecurityClientType(Table<O> child, ForeignKey<O, SecurityClientTypeRecord> key) {
        super(child, key, SECURITY_CLIENT_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityClientTypeRecord, ULong> getIdentity() {
        return (Identity<SecurityClientTypeRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityClientTypeRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_CLIENT_TYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityClientTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_CLIENT_TYPE_UK1_CLIENT_TYPE_CODE);
    }

    @Override
    public SecurityClientType as(String alias) {
        return new SecurityClientType(DSL.name(alias), this);
    }

    @Override
    public SecurityClientType as(Name alias) {
        return new SecurityClientType(alias, this);
    }

    @Override
    public SecurityClientType as(Table<?> alias) {
        return new SecurityClientType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientType rename(String name) {
        return new SecurityClientType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientType rename(Name name) {
        return new SecurityClientType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityClientType rename(Table<?> name) {
        return new SecurityClientType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, String, String, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
