/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityRolePermissionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityRolePermission extends TableImpl<SecurityRolePermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_role_permission</code>
     */
    public static final SecurityRolePermission SECURITY_ROLE_PERMISSION = new SecurityRolePermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityRolePermissionRecord> getRecordType() {
        return SecurityRolePermissionRecord.class;
    }

    /**
     * The column <code>security.security_role_permission.ID</code>. Primary key
     */
    public final TableField<SecurityRolePermissionRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_role_permission.ROLE_ID</code>. Role
     * ID
     */
    public final TableField<SecurityRolePermissionRecord, ULong> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Role ID");

    /**
     * The column <code>security.security_role_permission.PERMISSION_ID</code>.
     * Premission ID
     */
    public final TableField<SecurityRolePermissionRecord, ULong> PERMISSION_ID = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Premission ID");

    private SecurityRolePermission(Name alias, Table<SecurityRolePermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityRolePermission(Name alias, Table<SecurityRolePermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_role_permission</code> table
     * reference
     */
    public SecurityRolePermission(String alias) {
        this(DSL.name(alias), SECURITY_ROLE_PERMISSION);
    }

    /**
     * Create an aliased <code>security.security_role_permission</code> table
     * reference
     */
    public SecurityRolePermission(Name alias) {
        this(alias, SECURITY_ROLE_PERMISSION);
    }

    /**
     * Create a <code>security.security_role_permission</code> table reference
     */
    public SecurityRolePermission() {
        this(DSL.name("security_role_permission"), null);
    }

    public <O extends Record> SecurityRolePermission(Table<O> child, ForeignKey<O, SecurityRolePermissionRecord> key) {
        super(child, key, SECURITY_ROLE_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityRolePermissionRecord, ULong> getIdentity() {
        return (Identity<SecurityRolePermissionRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityRolePermissionRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_ROLE_PERMISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityRolePermissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_ROLE_PERMISSION_UK1_ROLE_PERMISSION);
    }

    @Override
    public List<ForeignKey<SecurityRolePermissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_ROLE_PERM_ROLE_ID, Keys.FK2_ROLE_PERM_PERMISSION_ID);
    }

    private transient SecurityRole _securityRole;
    private transient SecurityPermission _securityPermission;

    /**
     * Get the implicit join path to the <code>security.security_role</code>
     * table.
     */
    public SecurityRole securityRole() {
        if (_securityRole == null)
            _securityRole = new SecurityRole(this, Keys.FK1_ROLE_PERM_ROLE_ID);

        return _securityRole;
    }

    /**
     * Get the implicit join path to the
     * <code>security.security_permission</code> table.
     */
    public SecurityPermission securityPermission() {
        if (_securityPermission == null)
            _securityPermission = new SecurityPermission(this, Keys.FK2_ROLE_PERM_PERMISSION_ID);

        return _securityPermission;
    }

    @Override
    public SecurityRolePermission as(String alias) {
        return new SecurityRolePermission(DSL.name(alias), this);
    }

    @Override
    public SecurityRolePermission as(Name alias) {
        return new SecurityRolePermission(alias, this);
    }

    @Override
    public SecurityRolePermission as(Table<?> alias) {
        return new SecurityRolePermission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityRolePermission rename(String name) {
        return new SecurityRolePermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityRolePermission rename(Name name) {
        return new SecurityRolePermission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityRolePermission rename(Table<?> name) {
        return new SecurityRolePermission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
