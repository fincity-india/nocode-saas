/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;

import com.fincity.security.jooq.tables.SecurityRolePermission;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityRolePermissionRecord extends UpdatableRecordImpl<SecurityRolePermissionRecord> implements Record3<ULong, ULong, ULong> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_role_permission.ID</code>. Primary key
     */
    public SecurityRolePermissionRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_role_permission.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>security.security_role_permission.ROLE_ID</code>. Role
     * ID
     */
    public SecurityRolePermissionRecord setRoleId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>security.security_role_permission.ROLE_ID</code>. Role
     * ID
     */
    public ULong getRoleId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>security.security_role_permission.PERMISSION_ID</code>.
     * Premission ID
     */
    public SecurityRolePermissionRecord setPermissionId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>security.security_role_permission.PERMISSION_ID</code>.
     * Premission ID
     */
    public ULong getPermissionId() {
        return (ULong) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<ULong, ULong, ULong> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return SecurityRolePermission.SECURITY_ROLE_PERMISSION.ID;
    }

    @Override
    public Field<ULong> field2() {
        return SecurityRolePermission.SECURITY_ROLE_PERMISSION.ROLE_ID;
    }

    @Override
    public Field<ULong> field3() {
        return SecurityRolePermission.SECURITY_ROLE_PERMISSION.PERMISSION_ID;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getRoleId();
    }

    @Override
    public ULong component3() {
        return getPermissionId();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getRoleId();
    }

    @Override
    public ULong value3() {
        return getPermissionId();
    }

    @Override
    public SecurityRolePermissionRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public SecurityRolePermissionRecord value2(ULong value) {
        setRoleId(value);
        return this;
    }

    @Override
    public SecurityRolePermissionRecord value3(ULong value) {
        setPermissionId(value);
        return this;
    }

    @Override
    public SecurityRolePermissionRecord values(ULong value1, ULong value2, ULong value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityRolePermissionRecord
     */
    public SecurityRolePermissionRecord() {
        super(SecurityRolePermission.SECURITY_ROLE_PERMISSION);
    }

    /**
     * Create a detached, initialised SecurityRolePermissionRecord
     */
    public SecurityRolePermissionRecord(ULong id, ULong roleId, ULong permissionId) {
        super(SecurityRolePermission.SECURITY_ROLE_PERMISSION);

        setId(id);
        setRoleId(roleId);
        setPermissionId(permissionId);
    }
}
