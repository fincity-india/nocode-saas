/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityAppLimitationsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityAppLimitations extends TableImpl<SecurityAppLimitationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_app_limitations</code>
     */
    public static final SecurityAppLimitations SECURITY_APP_LIMITATIONS = new SecurityAppLimitations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAppLimitationsRecord> getRecordType() {
        return SecurityAppLimitationsRecord.class;
    }

    /**
     * The column <code>security.security_app_limitations.ID</code>. Primary key
     */
    public final TableField<SecurityAppLimitationsRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_app_limitations.APP_ID</code>. App id
     * to which this user belongs to.
     */
    public final TableField<SecurityAppLimitationsRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App id to which this user belongs to.");

    /**
     * The column <code>security.security_app_limitations.CLIENT_ID</code>.
     * Client id to which this user belongs to.
     */
    public final TableField<SecurityAppLimitationsRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client id to which this user belongs to.");

    /**
     * The column <code>security.security_app_limitations.NAME</code>. Name of
     * the object which need to be limited.
     */
    public final TableField<SecurityAppLimitationsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Name of the object which need to be limited.");

    /**
     * The column <code>security.security_app_limitations.LIMIT</code>. Number
     * of times to perform this task for selected app and client.
     */
    public final TableField<SecurityAppLimitationsRecord, ULong> LIMIT = createField(DSL.name("LIMIT"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Number of times to perform this task for selected app and client.");

    /**
     * The column <code>security.security_app_limitations.CREATED_BY</code>. ID
     * of the user who created this row.
     */
    public final TableField<SecurityAppLimitationsRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row.");

    /**
     * The column <code>security.security_app_limitations.CREATED_AT</code>.
     * Time when this row is created.
     */
    public final TableField<SecurityAppLimitationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created.");

    private SecurityAppLimitations(Name alias, Table<SecurityAppLimitationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityAppLimitations(Name alias, Table<SecurityAppLimitationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_app_limitations</code> table
     * reference
     */
    public SecurityAppLimitations(String alias) {
        this(DSL.name(alias), SECURITY_APP_LIMITATIONS);
    }

    /**
     * Create an aliased <code>security.security_app_limitations</code> table
     * reference
     */
    public SecurityAppLimitations(Name alias) {
        this(alias, SECURITY_APP_LIMITATIONS);
    }

    /**
     * Create a <code>security.security_app_limitations</code> table reference
     */
    public SecurityAppLimitations() {
        this(DSL.name("security_app_limitations"), null);
    }

    public <O extends Record> SecurityAppLimitations(Table<O> child, ForeignKey<O, SecurityAppLimitationsRecord> key) {
        super(child, key, SECURITY_APP_LIMITATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAppLimitationsRecord, ULong> getIdentity() {
        return (Identity<SecurityAppLimitationsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAppLimitationsRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_APP_LIMITATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityAppLimitationsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_APP_LIMITATIONS_UK1_LIMIT_APP_CLIENT);
    }

    @Override
    public List<ForeignKey<SecurityAppLimitationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK2_LIMIT_APP_ID, Keys.FK1_LIMIT_CLIENT_ID);
    }

    private transient SecurityApp _securityApp;
    private transient SecurityClient _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityApp securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityApp(this, Keys.FK2_LIMIT_APP_ID);

        return _securityApp;
    }

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_LIMIT_CLIENT_ID);

        return _securityClient;
    }

    @Override
    public SecurityAppLimitations as(String alias) {
        return new SecurityAppLimitations(DSL.name(alias), this);
    }

    @Override
    public SecurityAppLimitations as(Name alias) {
        return new SecurityAppLimitations(alias, this);
    }

    @Override
    public SecurityAppLimitations as(Table<?> alias) {
        return new SecurityAppLimitations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppLimitations rename(String name) {
        return new SecurityAppLimitations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppLimitations rename(Name name) {
        return new SecurityAppLimitations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppLimitations rename(Table<?> name) {
        return new SecurityAppLimitations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, ULong, String, ULong, ULong, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super ULong, ? super ULong, ? super ULong, ? super String, ? super ULong, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super ULong, ? super ULong, ? super ULong, ? super String, ? super ULong, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
