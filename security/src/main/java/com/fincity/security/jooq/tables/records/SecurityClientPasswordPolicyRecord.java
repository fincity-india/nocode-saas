/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables.records;


import com.fincity.security.jooq.tables.SecurityClientPasswordPolicy;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record20;
import org.jooq.Row20;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityClientPasswordPolicyRecord extends UpdatableRecordImpl<SecurityClientPasswordPolicyRecord> implements Record20<ULong, ULong, Byte, Byte, Byte, Byte, Byte, String, UShort, UShort, UShort, UShort, UShort, UShort, UShort, ULong, LocalDateTime, ULong, LocalDateTime, ULong> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>security.security_client_password_policy.ID</code>.
     * Primary key
     */
    public SecurityClientPasswordPolicyRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.ID</code>.
     * Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CLIENT_ID</code>. Client
     * ID
     */
    public SecurityClientPasswordPolicyRecord setClientId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CLIENT_ID</code>. Client
     * ID
     */
    public ULong getClientId() {
        return (ULong) get(1);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_UPPERCASE</code>.
     * Atleast one uppercase letter
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneUppercase(Byte value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_UPPERCASE</code>.
     * Atleast one uppercase letter
     */
    public Byte getAtleastOneUppercase() {
        return (Byte) get(2);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_LOWERCASE</code>.
     * Atleast one lowercase letter
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneLowercase(Byte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_LOWERCASE</code>.
     * Atleast one lowercase letter
     */
    public Byte getAtleastOneLowercase() {
        return (Byte) get(3);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_DIGIT</code>.
     * Atleast one digit
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneDigit(Byte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_DIGIT</code>.
     * Atleast one digit
     */
    public Byte getAtleastOneDigit() {
        return (Byte) get(4);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_SPECIAL_CHAR</code>.
     * Atleast one special characters
     */
    public SecurityClientPasswordPolicyRecord setAtleastOneSpecialChar(Byte value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.ATLEAST_ONE_SPECIAL_CHAR</code>.
     * Atleast one special characters
     */
    public Byte getAtleastOneSpecialChar() {
        return (Byte) get(5);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.SPACES_ALLOWED</code>.
     * Spaces are allowed
     */
    public SecurityClientPasswordPolicyRecord setSpacesAllowed(Byte value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.SPACES_ALLOWED</code>.
     * Spaces are allowed
     */
    public Byte getSpacesAllowed() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>security.security_client_password_policy.REGEX</code>.
     * Matching regular expression
     */
    public SecurityClientPasswordPolicyRecord setRegex(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.REGEX</code>.
     * Matching regular expression
     */
    public String getRegex() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PERCENTAGE_NAME_MATCH</code>.
     * Percent that first and last name matching
     */
    public SecurityClientPasswordPolicyRecord setPercentageNameMatch(UShort value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PERCENTAGE_NAME_MATCH</code>.
     * Percent that first and last name matching
     */
    public UShort getPercentageNameMatch() {
        return (UShort) get(8);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_IN_DAYS</code>.
     * Expiry of password in days
     */
    public SecurityClientPasswordPolicyRecord setPassExpiryInDays(UShort value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_IN_DAYS</code>.
     * Expiry of password in days
     */
    public UShort getPassExpiryInDays() {
        return (UShort) get(9);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_WARN_IN_DAYS</code>.
     * Password expiration warning in days
     */
    public SecurityClientPasswordPolicyRecord setPassExpiryWarnInDays(UShort value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_EXPIRY_WARN_IN_DAYS</code>.
     * Password expiration warning in days
     */
    public UShort getPassExpiryWarnInDays() {
        return (UShort) get(10);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_MIN_LENGTH</code>.
     * Minimum Length for the password
     */
    public SecurityClientPasswordPolicyRecord setPassMinLength(UShort value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_MIN_LENGTH</code>.
     * Minimum Length for the password
     */
    public UShort getPassMinLength() {
        return (UShort) get(11);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_MAX_LENGTH</code>.
     * Maximum Length for the password
     */
    public SecurityClientPasswordPolicyRecord setPassMaxLength(UShort value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_MAX_LENGTH</code>.
     * Maximum Length for the password
     */
    public UShort getPassMaxLength() {
        return (UShort) get(12);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.NO_FAILED_ATTEMPTS</code>.
     * No of continuous attempts of authentication with wrong password
     */
    public SecurityClientPasswordPolicyRecord setNoFailedAttempts(UShort value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.NO_FAILED_ATTEMPTS</code>.
     * No of continuous attempts of authentication with wrong password
     */
    public UShort getNoFailedAttempts() {
        return (UShort) get(13);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.PASS_HISTORY_COUNT</code>.
     * Remember how many passwords
     */
    public SecurityClientPasswordPolicyRecord setPassHistoryCount(UShort value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.PASS_HISTORY_COUNT</code>.
     * Remember how many passwords
     */
    public UShort getPassHistoryCount() {
        return (UShort) get(14);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public SecurityClientPasswordPolicyRecord setCreatedBy(ULong value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(15);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.CREATED_AT</code>. Time
     * when this row is created
     */
    public SecurityClientPasswordPolicyRecord setCreatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.CREATED_AT</code>. Time
     * when this row is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public SecurityClientPasswordPolicyRecord setUpdatedBy(ULong value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(17);
    }

    /**
     * Setter for
     * <code>security.security_client_password_policy.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public SecurityClientPasswordPolicyRecord setUpdatedAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for
     * <code>security.security_client_password_policy.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>security.security_client_password_policy.APP_ID</code>.
     */
    public SecurityClientPasswordPolicyRecord setAppId(ULong value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>security.security_client_password_policy.APP_ID</code>.
     */
    public ULong getAppId() {
        return (ULong) get(19);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record20 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row20<ULong, ULong, Byte, Byte, Byte, Byte, Byte, String, UShort, UShort, UShort, UShort, UShort, UShort, UShort, ULong, LocalDateTime, ULong, LocalDateTime, ULong> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    @Override
    public Row20<ULong, ULong, Byte, Byte, Byte, Byte, Byte, String, UShort, UShort, UShort, UShort, UShort, UShort, UShort, ULong, LocalDateTime, ULong, LocalDateTime, ULong> valuesRow() {
        return (Row20) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ID;
    }

    @Override
    public Field<ULong> field2() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CLIENT_ID;
    }

    @Override
    public Field<Byte> field3() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ATLEAST_ONE_UPPERCASE;
    }

    @Override
    public Field<Byte> field4() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ATLEAST_ONE_LOWERCASE;
    }

    @Override
    public Field<Byte> field5() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ATLEAST_ONE_DIGIT;
    }

    @Override
    public Field<Byte> field6() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.ATLEAST_ONE_SPECIAL_CHAR;
    }

    @Override
    public Field<Byte> field7() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.SPACES_ALLOWED;
    }

    @Override
    public Field<String> field8() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.REGEX;
    }

    @Override
    public Field<UShort> field9() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PERCENTAGE_NAME_MATCH;
    }

    @Override
    public Field<UShort> field10() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PASS_EXPIRY_IN_DAYS;
    }

    @Override
    public Field<UShort> field11() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PASS_EXPIRY_WARN_IN_DAYS;
    }

    @Override
    public Field<UShort> field12() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PASS_MIN_LENGTH;
    }

    @Override
    public Field<UShort> field13() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PASS_MAX_LENGTH;
    }

    @Override
    public Field<UShort> field14() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.NO_FAILED_ATTEMPTS;
    }

    @Override
    public Field<UShort> field15() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.PASS_HISTORY_COUNT;
    }

    @Override
    public Field<ULong> field16() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field17() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.CREATED_AT;
    }

    @Override
    public Field<ULong> field18() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field19() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.UPDATED_AT;
    }

    @Override
    public Field<ULong> field20() {
        return SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY.APP_ID;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getClientId();
    }

    @Override
    public Byte component3() {
        return getAtleastOneUppercase();
    }

    @Override
    public Byte component4() {
        return getAtleastOneLowercase();
    }

    @Override
    public Byte component5() {
        return getAtleastOneDigit();
    }

    @Override
    public Byte component6() {
        return getAtleastOneSpecialChar();
    }

    @Override
    public Byte component7() {
        return getSpacesAllowed();
    }

    @Override
    public String component8() {
        return getRegex();
    }

    @Override
    public UShort component9() {
        return getPercentageNameMatch();
    }

    @Override
    public UShort component10() {
        return getPassExpiryInDays();
    }

    @Override
    public UShort component11() {
        return getPassExpiryWarnInDays();
    }

    @Override
    public UShort component12() {
        return getPassMinLength();
    }

    @Override
    public UShort component13() {
        return getPassMaxLength();
    }

    @Override
    public UShort component14() {
        return getNoFailedAttempts();
    }

    @Override
    public UShort component15() {
        return getPassHistoryCount();
    }

    @Override
    public ULong component16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component17() {
        return getCreatedAt();
    }

    @Override
    public ULong component18() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component19() {
        return getUpdatedAt();
    }

    @Override
    public ULong component20() {
        return getAppId();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getClientId();
    }

    @Override
    public Byte value3() {
        return getAtleastOneUppercase();
    }

    @Override
    public Byte value4() {
        return getAtleastOneLowercase();
    }

    @Override
    public Byte value5() {
        return getAtleastOneDigit();
    }

    @Override
    public Byte value6() {
        return getAtleastOneSpecialChar();
    }

    @Override
    public Byte value7() {
        return getSpacesAllowed();
    }

    @Override
    public String value8() {
        return getRegex();
    }

    @Override
    public UShort value9() {
        return getPercentageNameMatch();
    }

    @Override
    public UShort value10() {
        return getPassExpiryInDays();
    }

    @Override
    public UShort value11() {
        return getPassExpiryWarnInDays();
    }

    @Override
    public UShort value12() {
        return getPassMinLength();
    }

    @Override
    public UShort value13() {
        return getPassMaxLength();
    }

    @Override
    public UShort value14() {
        return getNoFailedAttempts();
    }

    @Override
    public UShort value15() {
        return getPassHistoryCount();
    }

    @Override
    public ULong value16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value17() {
        return getCreatedAt();
    }

    @Override
    public ULong value18() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value19() {
        return getUpdatedAt();
    }

    @Override
    public ULong value20() {
        return getAppId();
    }

    @Override
    public SecurityClientPasswordPolicyRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value2(ULong value) {
        setClientId(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value3(Byte value) {
        setAtleastOneUppercase(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value4(Byte value) {
        setAtleastOneLowercase(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value5(Byte value) {
        setAtleastOneDigit(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value6(Byte value) {
        setAtleastOneSpecialChar(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value7(Byte value) {
        setSpacesAllowed(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value8(String value) {
        setRegex(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value9(UShort value) {
        setPercentageNameMatch(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value10(UShort value) {
        setPassExpiryInDays(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value11(UShort value) {
        setPassExpiryWarnInDays(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value12(UShort value) {
        setPassMinLength(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value13(UShort value) {
        setPassMaxLength(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value14(UShort value) {
        setNoFailedAttempts(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value15(UShort value) {
        setPassHistoryCount(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value16(ULong value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value17(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value18(ULong value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value19(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord value20(ULong value) {
        setAppId(value);
        return this;
    }

    @Override
    public SecurityClientPasswordPolicyRecord values(ULong value1, ULong value2, Byte value3, Byte value4, Byte value5, Byte value6, Byte value7, String value8, UShort value9, UShort value10, UShort value11, UShort value12, UShort value13, UShort value14, UShort value15, ULong value16, LocalDateTime value17, ULong value18, LocalDateTime value19, ULong value20) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        value20(value20);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SecurityClientPasswordPolicyRecord
     */
    public SecurityClientPasswordPolicyRecord() {
        super(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY);
    }

    /**
     * Create a detached, initialised SecurityClientPasswordPolicyRecord
     */
    public SecurityClientPasswordPolicyRecord(ULong id, ULong clientId, Byte atleastOneUppercase, Byte atleastOneLowercase, Byte atleastOneDigit, Byte atleastOneSpecialChar, Byte spacesAllowed, String regex, UShort percentageNameMatch, UShort passExpiryInDays, UShort passExpiryWarnInDays, UShort passMinLength, UShort passMaxLength, UShort noFailedAttempts, UShort passHistoryCount, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt, ULong appId) {
        super(SecurityClientPasswordPolicy.SECURITY_CLIENT_PASSWORD_POLICY);

        setId(id);
        setClientId(clientId);
        setAtleastOneUppercase(atleastOneUppercase);
        setAtleastOneLowercase(atleastOneLowercase);
        setAtleastOneDigit(atleastOneDigit);
        setAtleastOneSpecialChar(atleastOneSpecialChar);
        setSpacesAllowed(spacesAllowed);
        setRegex(regex);
        setPercentageNameMatch(percentageNameMatch);
        setPassExpiryInDays(passExpiryInDays);
        setPassExpiryWarnInDays(passExpiryWarnInDays);
        setPassMinLength(passMinLength);
        setPassMaxLength(passMaxLength);
        setNoFailedAttempts(noFailedAttempts);
        setPassHistoryCount(passHistoryCount);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
        setAppId(appId);
        resetChangedOnNotNull();
    }
}
