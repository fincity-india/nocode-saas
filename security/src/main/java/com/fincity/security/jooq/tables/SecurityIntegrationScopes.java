/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityIntegrationScopesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityIntegrationScopes extends TableImpl<SecurityIntegrationScopesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_integration_scopes</code>
     */
    public static final SecurityIntegrationScopes SECURITY_INTEGRATION_SCOPES = new SecurityIntegrationScopes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityIntegrationScopesRecord> getRecordType() {
        return SecurityIntegrationScopesRecord.class;
    }

    /**
     * The column <code>security.security_integration_scopes.ID</code>. Primary
     * key
     */
    public final TableField<SecurityIntegrationScopesRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_integration_scopes.CLIENT_ID</code>.
     * Client ID
     */
    public final TableField<SecurityIntegrationScopesRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Client ID");

    /**
     * The column
     * <code>security.security_integration_scopes.INTEGRATION_ID</code>.
     * Integration ID
     */
    public final TableField<SecurityIntegrationScopesRecord, ULong> INTEGRATION_ID = createField(DSL.name("INTEGRATION_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Integration ID");

    /**
     * The column <code>security.security_integration_scopes.NAME</code>. Scope
     * Name
     */
    public final TableField<SecurityIntegrationScopesRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Scope Name");

    /**
     * The column <code>security.security_integration_scopes.DESCRIPTION</code>.
     * Scope Description
     */
    public final TableField<SecurityIntegrationScopesRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Scope Description");

    /**
     * The column <code>security.security_integration_scopes.CREATED_BY</code>.
     * ID of the user who created this row
     */
    public final TableField<SecurityIntegrationScopesRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_integration_scopes.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecurityIntegrationScopesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_integration_scopes.UPDATED_BY</code>.
     * ID of the user who updated this row
     */
    public final TableField<SecurityIntegrationScopesRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_integration_scopes.UPDATED_AT</code>.
     * Time when this row is updated
     */
    public final TableField<SecurityIntegrationScopesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityIntegrationScopes(Name alias, Table<SecurityIntegrationScopesRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityIntegrationScopes(Name alias, Table<SecurityIntegrationScopesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_integration_scopes</code> table
     * reference
     */
    public SecurityIntegrationScopes(String alias) {
        this(DSL.name(alias), SECURITY_INTEGRATION_SCOPES);
    }

    /**
     * Create an aliased <code>security.security_integration_scopes</code> table
     * reference
     */
    public SecurityIntegrationScopes(Name alias) {
        this(alias, SECURITY_INTEGRATION_SCOPES);
    }

    /**
     * Create a <code>security.security_integration_scopes</code> table
     * reference
     */
    public SecurityIntegrationScopes() {
        this(DSL.name("security_integration_scopes"), null);
    }

    public <O extends Record> SecurityIntegrationScopes(Table<O> child, ForeignKey<O, SecurityIntegrationScopesRecord> key) {
        super(child, key, SECURITY_INTEGRATION_SCOPES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityIntegrationScopesRecord, ULong> getIdentity() {
        return (Identity<SecurityIntegrationScopesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityIntegrationScopesRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_INTEGRATION_SCOPES_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityIntegrationScopesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_INTEGRATION_SCOPES_CLIENT_ID);
    }

    @Override
    public List<ForeignKey<SecurityIntegrationScopesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK2_INTEGRATION_SCOPE_CLIENT_ID, Keys.FK1_INTEGRATION_SCOPE_INTEGRATION_ID);
    }

    private transient SecurityClient _securityClient;
    private transient SecurityIntegration _securityIntegration;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK2_INTEGRATION_SCOPE_CLIENT_ID);

        return _securityClient;
    }

    /**
     * Get the implicit join path to the
     * <code>security.security_integration</code> table.
     */
    public SecurityIntegration securityIntegration() {
        if (_securityIntegration == null)
            _securityIntegration = new SecurityIntegration(this, Keys.FK1_INTEGRATION_SCOPE_INTEGRATION_ID);

        return _securityIntegration;
    }

    @Override
    public SecurityIntegrationScopes as(String alias) {
        return new SecurityIntegrationScopes(DSL.name(alias), this);
    }

    @Override
    public SecurityIntegrationScopes as(Name alias) {
        return new SecurityIntegrationScopes(alias, this);
    }

    @Override
    public SecurityIntegrationScopes as(Table<?> alias) {
        return new SecurityIntegrationScopes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationScopes rename(String name) {
        return new SecurityIntegrationScopes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationScopes rename(Name name) {
        return new SecurityIntegrationScopes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationScopes rename(Table<?> name) {
        return new SecurityIntegrationScopes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, ULong, String, String, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super ULong, ? super ULong, ? super ULong, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super ULong, ? super ULong, ? super ULong, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
