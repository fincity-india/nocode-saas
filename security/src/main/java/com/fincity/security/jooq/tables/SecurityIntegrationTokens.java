/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityIntegrationTokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityIntegrationTokens extends TableImpl<SecurityIntegrationTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_integration_tokens</code>
     */
    public static final SecurityIntegrationTokens SECURITY_INTEGRATION_TOKENS = new SecurityIntegrationTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityIntegrationTokensRecord> getRecordType() {
        return SecurityIntegrationTokensRecord.class;
    }

    /**
     * The column <code>security.security_integration_tokens.ID</code>. Primary
     * key
     */
    public final TableField<SecurityIntegrationTokensRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column
     * <code>security.security_integration_tokens.INTEGRATION_ID</code>.
     * Integration ID
     */
    public final TableField<SecurityIntegrationTokensRecord, ULong> INTEGRATION_ID = createField(DSL.name("INTEGRATION_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Integration ID");

    /**
     * The column <code>security.security_integration_tokens.USER_ID</code>.
     * User ID
     */
    public final TableField<SecurityIntegrationTokensRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>security.security_integration_tokens.TOKEN</code>. Token
     */
    public final TableField<SecurityIntegrationTokensRecord, String> TOKEN = createField(DSL.name("TOKEN"), SQLDataType.VARCHAR(512).nullable(false), this, "Token");

    /**
     * The column
     * <code>security.security_integration_tokens.REFRESH_TOKEN</code>. Refresh
     * Token
     */
    public final TableField<SecurityIntegrationTokensRecord, String> REFRESH_TOKEN = createField(DSL.name("REFRESH_TOKEN"), SQLDataType.VARCHAR(512).nullable(false), this, "Refresh Token");

    /**
     * The column <code>security.security_integration_tokens.EXPIRES_AT</code>.
     * Token expiration time
     */
    public final TableField<SecurityIntegrationTokensRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("EXPIRES_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Token expiration time");

    /**
     * The column <code>security.security_integration_tokens.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecurityIntegrationTokensRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private SecurityIntegrationTokens(Name alias, Table<SecurityIntegrationTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityIntegrationTokens(Name alias, Table<SecurityIntegrationTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_integration_tokens</code> table
     * reference
     */
    public SecurityIntegrationTokens(String alias) {
        this(DSL.name(alias), SECURITY_INTEGRATION_TOKENS);
    }

    /**
     * Create an aliased <code>security.security_integration_tokens</code> table
     * reference
     */
    public SecurityIntegrationTokens(Name alias) {
        this(alias, SECURITY_INTEGRATION_TOKENS);
    }

    /**
     * Create a <code>security.security_integration_tokens</code> table
     * reference
     */
    public SecurityIntegrationTokens() {
        this(DSL.name("security_integration_tokens"), null);
    }

    public <O extends Record> SecurityIntegrationTokens(Table<O> child, ForeignKey<O, SecurityIntegrationTokensRecord> key) {
        super(child, key, SECURITY_INTEGRATION_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityIntegrationTokensRecord, ULong> getIdentity() {
        return (Identity<SecurityIntegrationTokensRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityIntegrationTokensRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_INTEGRATION_TOKENS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityIntegrationTokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_INTEGRATION_TOKENS_INTEGRATION_ID);
    }

    @Override
    public List<ForeignKey<SecurityIntegrationTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_USER_INTEGRATION_TOKEN_INTEGRATION_ID, Keys.FK2_USER_INTEGRATION_TOKEN_USER_ID);
    }

    private transient SecurityIntegration _securityIntegration;
    private transient SecurityUser _securityUser;

    /**
     * Get the implicit join path to the
     * <code>security.security_integration</code> table.
     */
    public SecurityIntegration securityIntegration() {
        if (_securityIntegration == null)
            _securityIntegration = new SecurityIntegration(this, Keys.FK1_USER_INTEGRATION_TOKEN_INTEGRATION_ID);

        return _securityIntegration;
    }

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table.
     */
    public SecurityUser securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUser(this, Keys.FK2_USER_INTEGRATION_TOKEN_USER_ID);

        return _securityUser;
    }

    @Override
    public SecurityIntegrationTokens as(String alias) {
        return new SecurityIntegrationTokens(DSL.name(alias), this);
    }

    @Override
    public SecurityIntegrationTokens as(Name alias) {
        return new SecurityIntegrationTokens(alias, this);
    }

    @Override
    public SecurityIntegrationTokens as(Table<?> alias) {
        return new SecurityIntegrationTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationTokens rename(String name) {
        return new SecurityIntegrationTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationTokens rename(Name name) {
        return new SecurityIntegrationTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegrationTokens rename(Table<?> name) {
        return new SecurityIntegrationTokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<ULong, ULong, ULong, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super ULong, ? super ULong, ? super ULong, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super ULong, ? super ULong, ? super ULong, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
