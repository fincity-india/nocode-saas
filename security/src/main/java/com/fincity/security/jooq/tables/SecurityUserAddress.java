/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityUserAddressRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityUserAddress extends TableImpl<SecurityUserAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_user_address</code>
     */
    public static final SecurityUserAddress SECURITY_USER_ADDRESS = new SecurityUserAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityUserAddressRecord> getRecordType() {
        return SecurityUserAddressRecord.class;
    }

    /**
     * The column <code>security.security_user_address.ID</code>. Primary key
     */
    public final TableField<SecurityUserAddressRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_user_address.USER_ID</code>. User ID
     */
    public final TableField<SecurityUserAddressRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "User ID");

    /**
     * The column <code>security.security_user_address.ADDRESS_ID</code>.
     * Address ID
     */
    public final TableField<SecurityUserAddressRecord, ULong> ADDRESS_ID = createField(DSL.name("ADDRESS_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Address ID");

    private SecurityUserAddress(Name alias, Table<SecurityUserAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityUserAddress(Name alias, Table<SecurityUserAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_user_address</code> table
     * reference
     */
    public SecurityUserAddress(String alias) {
        this(DSL.name(alias), SECURITY_USER_ADDRESS);
    }

    /**
     * Create an aliased <code>security.security_user_address</code> table
     * reference
     */
    public SecurityUserAddress(Name alias) {
        this(alias, SECURITY_USER_ADDRESS);
    }

    /**
     * Create a <code>security.security_user_address</code> table reference
     */
    public SecurityUserAddress() {
        this(DSL.name("security_user_address"), null);
    }

    public <O extends Record> SecurityUserAddress(Table<O> child, ForeignKey<O, SecurityUserAddressRecord> key) {
        super(child, key, SECURITY_USER_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityUserAddressRecord, ULong> getIdentity() {
        return (Identity<SecurityUserAddressRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityUserAddressRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_USER_ADDRESS_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecurityUserAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_USER_ADDRESS_USER_ID, Keys.FK2_USER_ADDRESS_ADDRESS_ID);
    }

    private transient SecurityUser _securityUser;
    private transient SecurityAddress _securityAddress;

    /**
     * Get the implicit join path to the <code>security.security_user</code>
     * table.
     */
    public SecurityUser securityUser() {
        if (_securityUser == null)
            _securityUser = new SecurityUser(this, Keys.FK1_USER_ADDRESS_USER_ID);

        return _securityUser;
    }

    /**
     * Get the implicit join path to the <code>security.security_address</code>
     * table.
     */
    public SecurityAddress securityAddress() {
        if (_securityAddress == null)
            _securityAddress = new SecurityAddress(this, Keys.FK2_USER_ADDRESS_ADDRESS_ID);

        return _securityAddress;
    }

    @Override
    public SecurityUserAddress as(String alias) {
        return new SecurityUserAddress(DSL.name(alias), this);
    }

    @Override
    public SecurityUserAddress as(Name alias) {
        return new SecurityUserAddress(alias, this);
    }

    @Override
    public SecurityUserAddress as(Table<?> alias) {
        return new SecurityUserAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(String name) {
        return new SecurityUserAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(Name name) {
        return new SecurityUserAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityUserAddress rename(Table<?> name) {
        return new SecurityUserAddress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, ULong> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super ULong, ? super ULong, ? super ULong, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
