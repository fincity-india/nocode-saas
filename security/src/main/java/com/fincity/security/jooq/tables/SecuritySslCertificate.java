/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecuritySslCertificateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecuritySslCertificate extends TableImpl<SecuritySslCertificateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_ssl_certificate</code>
     */
    public static final SecuritySslCertificate SECURITY_SSL_CERTIFICATE = new SecuritySslCertificate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecuritySslCertificateRecord> getRecordType() {
        return SecuritySslCertificateRecord.class;
    }

    /**
     * The column <code>security.security_ssl_certificate.ID</code>. Primary key
     */
    public final TableField<SecuritySslCertificateRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_ssl_certificate.URL_ID</code>. URL ID
     * for which this SSL certificate belongs to
     */
    public final TableField<SecuritySslCertificateRecord, ULong> URL_ID = createField(DSL.name("URL_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "URL ID for which this SSL certificate belongs to");

    /**
     * The column <code>security.security_ssl_certificate.CRT</code>. SSL
     * certificate
     */
    public final TableField<SecuritySslCertificateRecord, String> CRT = createField(DSL.name("CRT"), SQLDataType.CLOB.nullable(false), this, "SSL certificate");

    /**
     * The column <code>security.security_ssl_certificate.CRT_CHAIN</code>. SSL
     * certificate chain
     */
    public final TableField<SecuritySslCertificateRecord, String> CRT_CHAIN = createField(DSL.name("CRT_CHAIN"), SQLDataType.CLOB.nullable(false), this, "SSL certificate chain");

    /**
     * The column <code>security.security_ssl_certificate.CRT_KEY</code>. SSL
     * certificate key
     */
    public final TableField<SecuritySslCertificateRecord, String> CRT_KEY = createField(DSL.name("CRT_KEY"), SQLDataType.CLOB.nullable(false), this, "SSL certificate key");

    /**
     * The column <code>security.security_ssl_certificate.CSR</code>. SSL
     * certificate signing request
     */
    public final TableField<SecuritySslCertificateRecord, String> CSR = createField(DSL.name("CSR"), SQLDataType.CLOB.nullable(false), this, "SSL certificate signing request");

    /**
     * The column <code>security.security_ssl_certificate.DOMAINS</code>.
     * Domains for which this SSL certificate is valid
     */
    public final TableField<SecuritySslCertificateRecord, String> DOMAINS = createField(DSL.name("DOMAINS"), SQLDataType.VARCHAR(1024).nullable(false), this, "Domains for which this SSL certificate is valid");

    /**
     * The column <code>security.security_ssl_certificate.ORGANIZATION</code>.
     * Organization for which this SSL certificate is valid
     */
    public final TableField<SecuritySslCertificateRecord, String> ORGANIZATION = createField(DSL.name("ORGANIZATION"), SQLDataType.VARCHAR(1024).nullable(false), this, "Organization for which this SSL certificate is valid");

    /**
     * The column <code>security.security_ssl_certificate.EXPIRY_DATE</code>.
     * Expiry date of this SSL certificate
     */
    public final TableField<SecuritySslCertificateRecord, LocalDateTime> EXPIRY_DATE = createField(DSL.name("EXPIRY_DATE"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Expiry date of this SSL certificate");

    /**
     * The column <code>security.security_ssl_certificate.ISSUER</code>. Issuer
     * of this SSL certificate
     */
    public final TableField<SecuritySslCertificateRecord, String> ISSUER = createField(DSL.name("ISSUER"), SQLDataType.VARCHAR(1024).nullable(false), this, "Issuer of this SSL certificate");

    /**
     * The column <code>security.security_ssl_certificate.CURRENT</code>. Is
     * this the current SSL certificate for the URL
     */
    public final TableField<SecuritySslCertificateRecord, Byte> CURRENT = createField(DSL.name("CURRENT"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "Is this the current SSL certificate for the URL");

    /**
     * The column <code>security.security_ssl_certificate.CREATED_BY</code>. ID
     * of the user who created this row
     */
    public final TableField<SecuritySslCertificateRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_ssl_certificate.CREATED_AT</code>.
     * Time when this row is created
     */
    public final TableField<SecuritySslCertificateRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    private SecuritySslCertificate(Name alias, Table<SecuritySslCertificateRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecuritySslCertificate(Name alias, Table<SecuritySslCertificateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_ssl_certificate</code> table
     * reference
     */
    public SecuritySslCertificate(String alias) {
        this(DSL.name(alias), SECURITY_SSL_CERTIFICATE);
    }

    /**
     * Create an aliased <code>security.security_ssl_certificate</code> table
     * reference
     */
    public SecuritySslCertificate(Name alias) {
        this(alias, SECURITY_SSL_CERTIFICATE);
    }

    /**
     * Create a <code>security.security_ssl_certificate</code> table reference
     */
    public SecuritySslCertificate() {
        this(DSL.name("security_ssl_certificate"), null);
    }

    public <O extends Record> SecuritySslCertificate(Table<O> child, ForeignKey<O, SecuritySslCertificateRecord> key) {
        super(child, key, SECURITY_SSL_CERTIFICATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecuritySslCertificateRecord, ULong> getIdentity() {
        return (Identity<SecuritySslCertificateRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecuritySslCertificateRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_SSL_CERTIFICATE_PRIMARY;
    }

    @Override
    public List<ForeignKey<SecuritySslCertificateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_SSL_CRT_CLNT_URL_ID);
    }

    private transient SecurityClientUrl _securityClientUrl;

    /**
     * Get the implicit join path to the
     * <code>security.security_client_url</code> table.
     */
    public SecurityClientUrl securityClientUrl() {
        if (_securityClientUrl == null)
            _securityClientUrl = new SecurityClientUrl(this, Keys.FK1_SSL_CRT_CLNT_URL_ID);

        return _securityClientUrl;
    }

    @Override
    public SecuritySslCertificate as(String alias) {
        return new SecuritySslCertificate(DSL.name(alias), this);
    }

    @Override
    public SecuritySslCertificate as(Name alias) {
        return new SecuritySslCertificate(alias, this);
    }

    @Override
    public SecuritySslCertificate as(Table<?> alias) {
        return new SecuritySslCertificate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySslCertificate rename(String name) {
        return new SecuritySslCertificate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySslCertificate rename(Name name) {
        return new SecuritySslCertificate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecuritySslCertificate rename(Table<?> name) {
        return new SecuritySslCertificate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<ULong, ULong, String, String, String, String, String, String, LocalDateTime, String, Byte, ULong, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Byte, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Byte, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
