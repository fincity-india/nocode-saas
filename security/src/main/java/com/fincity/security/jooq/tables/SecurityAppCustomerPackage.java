/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityAppCustomerPackageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityAppCustomerPackage extends TableImpl<SecurityAppCustomerPackageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>security.security_app_customer_package</code>
     */
    public static final SecurityAppCustomerPackage SECURITY_APP_CUSTOMER_PACKAGE = new SecurityAppCustomerPackage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityAppCustomerPackageRecord> getRecordType() {
        return SecurityAppCustomerPackageRecord.class;
    }

    /**
     * The column <code>security.security_app_customer_package.ID</code>.
     * Primary key
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_app_customer_package.CLIENT_ID</code>.
     * Client ID
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Client ID");

    /**
     * The column <code>security.security_app_customer_package.APP_ID</code>.
     * App ID
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "App ID");

    /**
     * The column
     * <code>security.security_app_customer_package.PACKAGE_ID</code>. Package
     * ID
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> PACKAGE_ID = createField(DSL.name("PACKAGE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Package ID");

    /**
     * The column
     * <code>security.security_app_customer_package.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column
     * <code>security.security_app_customer_package.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<SecurityAppCustomerPackageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column
     * <code>security.security_app_customer_package.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<SecurityAppCustomerPackageRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column
     * <code>security.security_app_customer_package.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<SecurityAppCustomerPackageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityAppCustomerPackage(Name alias, Table<SecurityAppCustomerPackageRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityAppCustomerPackage(Name alias, Table<SecurityAppCustomerPackageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_app_customer_package</code>
     * table reference
     */
    public SecurityAppCustomerPackage(String alias) {
        this(DSL.name(alias), SECURITY_APP_CUSTOMER_PACKAGE);
    }

    /**
     * Create an aliased <code>security.security_app_customer_package</code>
     * table reference
     */
    public SecurityAppCustomerPackage(Name alias) {
        this(alias, SECURITY_APP_CUSTOMER_PACKAGE);
    }

    /**
     * Create a <code>security.security_app_customer_package</code> table
     * reference
     */
    public SecurityAppCustomerPackage() {
        this(DSL.name("security_app_customer_package"), null);
    }

    public <O extends Record> SecurityAppCustomerPackage(Table<O> child, ForeignKey<O, SecurityAppCustomerPackageRecord> key) {
        super(child, key, SECURITY_APP_CUSTOMER_PACKAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityAppCustomerPackageRecord, ULong> getIdentity() {
        return (Identity<SecurityAppCustomerPackageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityAppCustomerPackageRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_APP_CUSTOMER_PACKAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityAppCustomerPackageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_APP_CUSTOMER_PACKAGE_CLIENT_ID);
    }

    @Override
    public List<ForeignKey<SecurityAppCustomerPackageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_APP_CUST_PKG_CLNT_ID, Keys.FK2_APP_CUST_PKG_APP_ID, Keys.FK3_APP_CUST_PKG_PKG_ID);
    }

    private transient SecurityClient _securityClient;
    private transient SecurityApp _securityApp;
    private transient SecurityPackage _securityPackage;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_APP_CUST_PKG_CLNT_ID);

        return _securityClient;
    }

    /**
     * Get the implicit join path to the <code>security.security_app</code>
     * table.
     */
    public SecurityApp securityApp() {
        if (_securityApp == null)
            _securityApp = new SecurityApp(this, Keys.FK2_APP_CUST_PKG_APP_ID);

        return _securityApp;
    }

    /**
     * Get the implicit join path to the <code>security.security_package</code>
     * table.
     */
    public SecurityPackage securityPackage() {
        if (_securityPackage == null)
            _securityPackage = new SecurityPackage(this, Keys.FK3_APP_CUST_PKG_PKG_ID);

        return _securityPackage;
    }

    @Override
    public SecurityAppCustomerPackage as(String alias) {
        return new SecurityAppCustomerPackage(DSL.name(alias), this);
    }

    @Override
    public SecurityAppCustomerPackage as(Name alias) {
        return new SecurityAppCustomerPackage(alias, this);
    }

    @Override
    public SecurityAppCustomerPackage as(Table<?> alias) {
        return new SecurityAppCustomerPackage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppCustomerPackage rename(String name) {
        return new SecurityAppCustomerPackage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppCustomerPackage rename(Name name) {
        return new SecurityAppCustomerPackage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityAppCustomerPackage rename(Table<?> name) {
        return new SecurityAppCustomerPackage(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, ULong, ULong, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
