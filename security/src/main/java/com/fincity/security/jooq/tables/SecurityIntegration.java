/*
 * This file is generated by jOOQ.
 */
package com.fincity.security.jooq.tables;


import com.fincity.security.jooq.Keys;
import com.fincity.security.jooq.Security;
import com.fincity.security.jooq.tables.records.SecurityIntegrationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecurityIntegration extends TableImpl<SecurityIntegrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>security.security_integration</code>
     */
    public static final SecurityIntegration SECURITY_INTEGRATION = new SecurityIntegration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecurityIntegrationRecord> getRecordType() {
        return SecurityIntegrationRecord.class;
    }

    /**
     * The column <code>security.security_integration.ID</code>. Primary key
     */
    public final TableField<SecurityIntegrationRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>security.security_integration.CLIENT_ID</code>. Client
     * ID
     */
    public final TableField<SecurityIntegrationRecord, ULong> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINTUNSIGNED, this, "Client ID");

    /**
     * The column <code>security.security_integration.NAME</code>. Integration
     * Name
     */
    public final TableField<SecurityIntegrationRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "Integration Name");

    /**
     * The column <code>security.security_integration.PLATFORM</code>.
     * Integration Platform Name
     */
    public final TableField<SecurityIntegrationRecord, String> PLATFORM = createField(DSL.name("PLATFORM"), SQLDataType.VARCHAR(256).nullable(false), this, "Integration Platform Name");

    /**
     * The column <code>security.security_integration.DESCRIPTION</code>.
     * Integration Description
     */
    public final TableField<SecurityIntegrationRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "Integration Description");

    /**
     * The column <code>security.security_integration.CREATED_BY</code>. ID of
     * the user who created this row
     */
    public final TableField<SecurityIntegrationRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>security.security_integration.CREATED_AT</code>. Time
     * when this row is created
     */
    public final TableField<SecurityIntegrationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is created");

    /**
     * The column <code>security.security_integration.UPDATED_BY</code>. ID of
     * the user who updated this row
     */
    public final TableField<SecurityIntegrationRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>security.security_integration.UPDATED_AT</code>. Time
     * when this row is updated
     */
    public final TableField<SecurityIntegrationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "Time when this row is updated");

    private SecurityIntegration(Name alias, Table<SecurityIntegrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecurityIntegration(Name alias, Table<SecurityIntegrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>security.security_integration</code> table
     * reference
     */
    public SecurityIntegration(String alias) {
        this(DSL.name(alias), SECURITY_INTEGRATION);
    }

    /**
     * Create an aliased <code>security.security_integration</code> table
     * reference
     */
    public SecurityIntegration(Name alias) {
        this(alias, SECURITY_INTEGRATION);
    }

    /**
     * Create a <code>security.security_integration</code> table reference
     */
    public SecurityIntegration() {
        this(DSL.name("security_integration"), null);
    }

    public <O extends Record> SecurityIntegration(Table<O> child, ForeignKey<O, SecurityIntegrationRecord> key) {
        super(child, key, SECURITY_INTEGRATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Security.SECURITY;
    }

    @Override
    public Identity<SecurityIntegrationRecord, ULong> getIdentity() {
        return (Identity<SecurityIntegrationRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<SecurityIntegrationRecord> getPrimaryKey() {
        return Keys.KEY_SECURITY_INTEGRATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SecurityIntegrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SECURITY_INTEGRATION_CLIENT_ID);
    }

    @Override
    public List<ForeignKey<SecurityIntegrationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_INTEGRATION_CLIENT_ID);
    }

    private transient SecurityClient _securityClient;

    /**
     * Get the implicit join path to the <code>security.security_client</code>
     * table.
     */
    public SecurityClient securityClient() {
        if (_securityClient == null)
            _securityClient = new SecurityClient(this, Keys.FK1_INTEGRATION_CLIENT_ID);

        return _securityClient;
    }

    @Override
    public SecurityIntegration as(String alias) {
        return new SecurityIntegration(DSL.name(alias), this);
    }

    @Override
    public SecurityIntegration as(Name alias) {
        return new SecurityIntegration(alias, this);
    }

    @Override
    public SecurityIntegration as(Table<?> alias) {
        return new SecurityIntegration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegration rename(String name) {
        return new SecurityIntegration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegration rename(Name name) {
        return new SecurityIntegration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecurityIntegration rename(Table<?> name) {
        return new SecurityIntegration(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, ULong, String, String, String, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
