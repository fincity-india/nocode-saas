/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.files.jooq.tables;


import com.fincity.saas.files.jooq.Files;
import com.fincity.saas.files.jooq.Keys;
import com.fincity.saas.files.jooq.tables.records.FilesSecuredAccessKeyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilesSecuredAccessKey extends TableImpl<FilesSecuredAccessKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>files.files_secured_access_key</code>
     */
    public static final FilesSecuredAccessKey FILES_SECURED_ACCESS_KEY = new FilesSecuredAccessKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesSecuredAccessKeyRecord> getRecordType() {
        return FilesSecuredAccessKeyRecord.class;
    }

    /**
     * The column <code>files.files_secured_access_key.id</code>. Primary key
     */
    public final TableField<FilesSecuredAccessKeyRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>files.files_secured_access_key.path</code>. Path which
     * needs to be secured.
     */
    public final TableField<FilesSecuredAccessKeyRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(1024).nullable(false), this, "Path which needs to be secured.");

    /**
     * The column <code>files.files_secured_access_key.access_key</code>. Key
     * used for securing the file.
     */
    public final TableField<FilesSecuredAccessKeyRecord, String> ACCESS_KEY = createField(DSL.name("access_key"), SQLDataType.CHAR(16).nullable(false), this, "Key used for securing the file.");

    /**
     * The column <code>files.files_secured_access_key.access_till</code>. Time
     * which the path can be accessed
     */
    public final TableField<FilesSecuredAccessKeyRecord, LocalDateTime> ACCESS_TILL = createField(DSL.name("access_till"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time which the path can be accessed");

    /**
     * The column <code>files.files_secured_access_key.access_limit</code>.
     * Maximum times in which the file can be accessed
     */
    public final TableField<FilesSecuredAccessKeyRecord, ULong> ACCESS_LIMIT = createField(DSL.name("access_limit"), SQLDataType.BIGINTUNSIGNED, this, "Maximum times in which the file can be accessed");

    /**
     * The column <code>files.files_secured_access_key.accessed_count</code>.
     * Tracks count of file accessed
     */
    public final TableField<FilesSecuredAccessKeyRecord, ULong> ACCESSED_COUNT = createField(DSL.name("accessed_count"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINTUNSIGNED)), this, "Tracks count of file accessed");

    /**
     * The column <code>files.files_secured_access_key.created_by</code>. User
     * id who created this row.
     */
    public final TableField<FilesSecuredAccessKeyRecord, ULong> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINTUNSIGNED, this, "User id who created this row.");

    /**
     * The column <code>files.files_secured_access_key.created_at</code>. Time
     * at which this row was created
     */
    public final TableField<FilesSecuredAccessKeyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "Time at which this row was created");

    private FilesSecuredAccessKey(Name alias, Table<FilesSecuredAccessKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private FilesSecuredAccessKey(Name alias, Table<FilesSecuredAccessKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>files.files_secured_access_key</code> table
     * reference
     */
    public FilesSecuredAccessKey(String alias) {
        this(DSL.name(alias), FILES_SECURED_ACCESS_KEY);
    }

    /**
     * Create an aliased <code>files.files_secured_access_key</code> table
     * reference
     */
    public FilesSecuredAccessKey(Name alias) {
        this(alias, FILES_SECURED_ACCESS_KEY);
    }

    /**
     * Create a <code>files.files_secured_access_key</code> table reference
     */
    public FilesSecuredAccessKey() {
        this(DSL.name("files_secured_access_key"), null);
    }

    public <O extends Record> FilesSecuredAccessKey(Table<O> child, ForeignKey<O, FilesSecuredAccessKeyRecord> key) {
        super(child, key, FILES_SECURED_ACCESS_KEY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Files.FILES;
    }

    @Override
    public Identity<FilesSecuredAccessKeyRecord, ULong> getIdentity() {
        return (Identity<FilesSecuredAccessKeyRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilesSecuredAccessKeyRecord> getPrimaryKey() {
        return Keys.KEY_FILES_SECURED_ACCESS_KEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<FilesSecuredAccessKeyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_FILES_SECURED_ACCESS_KEY_ACCESS_KEY_UNIQUE);
    }

    @Override
    public FilesSecuredAccessKey as(String alias) {
        return new FilesSecuredAccessKey(DSL.name(alias), this);
    }

    @Override
    public FilesSecuredAccessKey as(Name alias) {
        return new FilesSecuredAccessKey(alias, this);
    }

    @Override
    public FilesSecuredAccessKey as(Table<?> alias) {
        return new FilesSecuredAccessKey(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesSecuredAccessKey rename(String name) {
        return new FilesSecuredAccessKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesSecuredAccessKey rename(Name name) {
        return new FilesSecuredAccessKey(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilesSecuredAccessKey rename(Table<?> name) {
        return new FilesSecuredAccessKey(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, String, String, LocalDateTime, ULong, ULong, ULong, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super ULong, ? super String, ? super String, ? super LocalDateTime, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super ULong, ? super String, ? super String, ? super LocalDateTime, ? super ULong, ? super ULong, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
