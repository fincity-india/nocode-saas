/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.core.jooq.tables.records;


import com.fincity.saas.core.jooq.enums.CoreTokensTokenType;
import com.fincity.saas.core.jooq.tables.CoreTokens;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTokensRecord extends UpdatableRecordImpl<CoreTokensRecord> implements Record11<ULong, ULong, String, String, String, CoreTokensTokenType, String, Byte, LocalDateTime, ULong, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>core.core_tokens.ID</code>. Primary key
     */
    public CoreTokensRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>core.core_tokens.USER_ID</code>. User ID
     */
    public CoreTokensRecord setUserId(ULong value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.USER_ID</code>. User ID
     */
    public ULong getUserId() {
        return (ULong) get(1);
    }

    /**
     * Setter for <code>core.core_tokens.CLIENT_CODE</code>. Client Code
     */
    public CoreTokensRecord setClientCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.CLIENT_CODE</code>. Client Code
     */
    public String getClientCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>core.core_tokens.APP_CODE</code>. App Code
     */
    public CoreTokensRecord setAppCode(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.APP_CODE</code>. App Code
     */
    public String getAppCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>core.core_tokens.CONNECTION_NAME</code>. Connection for
     * which token is generated
     */
    public CoreTokensRecord setConnectionName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.CONNECTION_NAME</code>. Connection for
     * which token is generated
     */
    public String getConnectionName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>core.core_tokens.TOKEN_TYPE</code>. Type of token that
     * is generated
     */
    public CoreTokensRecord setTokenType(CoreTokensTokenType value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.TOKEN_TYPE</code>. Type of token that
     * is generated
     */
    public CoreTokensTokenType getTokenType() {
        return (CoreTokensTokenType) get(5);
    }

    /**
     * Setter for <code>core.core_tokens.TOKEN</code>. Generated Token
     */
    public CoreTokensRecord setToken(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.TOKEN</code>. Generated Token
     */
    public String getToken() {
        return (String) get(6);
    }

    /**
     * Setter for <code>core.core_tokens.IS_REVOKED</code>. If false, means
     * token is working
     */
    public CoreTokensRecord setIsRevoked(Byte value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.IS_REVOKED</code>. If false, means
     * token is working
     */
    public Byte getIsRevoked() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>core.core_tokens.EXPIRES_AT</code>. Time when this token
     * will expire
     */
    public CoreTokensRecord setExpiresAt(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.EXPIRES_AT</code>. Time when this token
     * will expire
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>core.core_tokens.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public CoreTokensRecord setCreatedBy(ULong value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(9);
    }

    /**
     * Setter for <code>core.core_tokens.CREATED_AT</code>. Time when this row
     * is created
     */
    public CoreTokensRecord setCreatedAt(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>core.core_tokens.CREATED_AT</code>. Time when this row
     * is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, String, String, String, CoreTokensTokenType, String, Byte, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<ULong, ULong, String, String, String, CoreTokensTokenType, String, Byte, LocalDateTime, ULong, LocalDateTime> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return CoreTokens.CORE_TOKENS.ID;
    }

    @Override
    public Field<ULong> field2() {
        return CoreTokens.CORE_TOKENS.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return CoreTokens.CORE_TOKENS.CLIENT_CODE;
    }

    @Override
    public Field<String> field4() {
        return CoreTokens.CORE_TOKENS.APP_CODE;
    }

    @Override
    public Field<String> field5() {
        return CoreTokens.CORE_TOKENS.CONNECTION_NAME;
    }

    @Override
    public Field<CoreTokensTokenType> field6() {
        return CoreTokens.CORE_TOKENS.TOKEN_TYPE;
    }

    @Override
    public Field<String> field7() {
        return CoreTokens.CORE_TOKENS.TOKEN;
    }

    @Override
    public Field<Byte> field8() {
        return CoreTokens.CORE_TOKENS.IS_REVOKED;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return CoreTokens.CORE_TOKENS.EXPIRES_AT;
    }

    @Override
    public Field<ULong> field10() {
        return CoreTokens.CORE_TOKENS.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return CoreTokens.CORE_TOKENS.CREATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public ULong component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getClientCode();
    }

    @Override
    public String component4() {
        return getAppCode();
    }

    @Override
    public String component5() {
        return getConnectionName();
    }

    @Override
    public CoreTokensTokenType component6() {
        return getTokenType();
    }

    @Override
    public String component7() {
        return getToken();
    }

    @Override
    public Byte component8() {
        return getIsRevoked();
    }

    @Override
    public LocalDateTime component9() {
        return getExpiresAt();
    }

    @Override
    public ULong component10() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component11() {
        return getCreatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public ULong value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getClientCode();
    }

    @Override
    public String value4() {
        return getAppCode();
    }

    @Override
    public String value5() {
        return getConnectionName();
    }

    @Override
    public CoreTokensTokenType value6() {
        return getTokenType();
    }

    @Override
    public String value7() {
        return getToken();
    }

    @Override
    public Byte value8() {
        return getIsRevoked();
    }

    @Override
    public LocalDateTime value9() {
        return getExpiresAt();
    }

    @Override
    public ULong value10() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value11() {
        return getCreatedAt();
    }

    @Override
    public CoreTokensRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public CoreTokensRecord value2(ULong value) {
        setUserId(value);
        return this;
    }

    @Override
    public CoreTokensRecord value3(String value) {
        setClientCode(value);
        return this;
    }

    @Override
    public CoreTokensRecord value4(String value) {
        setAppCode(value);
        return this;
    }

    @Override
    public CoreTokensRecord value5(String value) {
        setConnectionName(value);
        return this;
    }

    @Override
    public CoreTokensRecord value6(CoreTokensTokenType value) {
        setTokenType(value);
        return this;
    }

    @Override
    public CoreTokensRecord value7(String value) {
        setToken(value);
        return this;
    }

    @Override
    public CoreTokensRecord value8(Byte value) {
        setIsRevoked(value);
        return this;
    }

    @Override
    public CoreTokensRecord value9(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public CoreTokensRecord value10(ULong value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public CoreTokensRecord value11(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public CoreTokensRecord values(ULong value1, ULong value2, String value3, String value4, String value5, CoreTokensTokenType value6, String value7, Byte value8, LocalDateTime value9, ULong value10, LocalDateTime value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoreTokensRecord
     */
    public CoreTokensRecord() {
        super(CoreTokens.CORE_TOKENS);
    }

    /**
     * Create a detached, initialised CoreTokensRecord
     */
    public CoreTokensRecord(ULong id, ULong userId, String clientCode, String appCode, String connectionName, CoreTokensTokenType tokenType, String token, Byte isRevoked, LocalDateTime expiresAt, ULong createdBy, LocalDateTime createdAt) {
        super(CoreTokens.CORE_TOKENS);

        setId(id);
        setUserId(userId);
        setClientCode(clientCode);
        setAppCode(appCode);
        setConnectionName(connectionName);
        setTokenType(tokenType);
        setToken(token);
        setIsRevoked(isRevoked);
        setExpiresAt(expiresAt);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
    }
}
