/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.core.jooq.tables;


import com.fincity.saas.core.jooq.Core;
import com.fincity.saas.core.jooq.Indexes;
import com.fincity.saas.core.jooq.Keys;
import com.fincity.saas.core.jooq.enums.CoreTokensTokenType;
import com.fincity.saas.core.jooq.tables.records.CoreTokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoreTokens extends TableImpl<CoreTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.core_tokens</code>
     */
    public static final CoreTokens CORE_TOKENS = new CoreTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoreTokensRecord> getRecordType() {
        return CoreTokensRecord.class;
    }

    /**
     * The column <code>core.core_tokens.ID</code>. Primary key
     */
    public final TableField<CoreTokensRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>core.core_tokens.USER_ID</code>. User ID
     */
    public final TableField<CoreTokensRecord, ULong> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.BIGINTUNSIGNED, this, "User ID");

    /**
     * The column <code>core.core_tokens.CLIENT_CODE</code>. Client Code
     */
    public final TableField<CoreTokensRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client Code");

    /**
     * The column <code>core.core_tokens.APP_CODE</code>. App Code
     */
    public final TableField<CoreTokensRecord, String> APP_CODE = createField(DSL.name("APP_CODE"), SQLDataType.CHAR(8).nullable(false), this, "App Code");

    /**
     * The column <code>core.core_tokens.CONNECTION_NAME</code>. Connection for
     * which token is generated
     */
    public final TableField<CoreTokensRecord, String> CONNECTION_NAME = createField(DSL.name("CONNECTION_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "Connection for which token is generated");

    /**
     * The column <code>core.core_tokens.TOKEN_TYPE</code>. Type of token that
     * is generated
     */
    public final TableField<CoreTokensRecord, CoreTokensTokenType> TOKEN_TYPE = createField(DSL.name("TOKEN_TYPE"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.fincity.saas.core.jooq.enums.CoreTokensTokenType.class), this, "Type of token that is generated");

    /**
     * The column <code>core.core_tokens.TOKEN</code>. Generated Token
     */
    public final TableField<CoreTokensRecord, String> TOKEN = createField(DSL.name("TOKEN"), SQLDataType.CLOB.nullable(false), this, "Generated Token");

    /**
     * The column <code>core.core_tokens.IS_REVOKED</code>. If false, means
     * token is working
     */
    public final TableField<CoreTokensRecord, Byte> IS_REVOKED = createField(DSL.name("IS_REVOKED"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "If false, means token is working");

    /**
     * The column <code>core.core_tokens.EXPIRES_AT</code>. Time when this token
     * will expire
     */
    public final TableField<CoreTokensRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("EXPIRES_AT"), SQLDataType.LOCALDATETIME(0), this, "Time when this token will expire");

    /**
     * The column <code>core.core_tokens.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public final TableField<CoreTokensRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>core.core_tokens.CREATED_AT</code>. Time when this row
     * is created
     */
    public final TableField<CoreTokensRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is created");

    private CoreTokens(Name alias, Table<CoreTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoreTokens(Name alias, Table<CoreTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>core.core_tokens</code> table reference
     */
    public CoreTokens(String alias) {
        this(DSL.name(alias), CORE_TOKENS);
    }

    /**
     * Create an aliased <code>core.core_tokens</code> table reference
     */
    public CoreTokens(Name alias) {
        this(alias, CORE_TOKENS);
    }

    /**
     * Create a <code>core.core_tokens</code> table reference
     */
    public CoreTokens() {
        this(DSL.name("core_tokens"), null);
    }

    public <O extends Record> CoreTokens(Table<O> child, ForeignKey<O, CoreTokensRecord> key) {
        super(child, key, CORE_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Core.CORE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CORE_TOKENS_K1_USER_CLIENT_APP_CODE_CONNECTION, Indexes.CORE_TOKENS_K2_CLIENT_APP_CONNECTION);
    }

    @Override
    public Identity<CoreTokensRecord, ULong> getIdentity() {
        return (Identity<CoreTokensRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoreTokensRecord> getPrimaryKey() {
        return Keys.KEY_CORE_TOKENS_PRIMARY;
    }

    @Override
    public CoreTokens as(String alias) {
        return new CoreTokens(DSL.name(alias), this);
    }

    @Override
    public CoreTokens as(Name alias) {
        return new CoreTokens(alias, this);
    }

    @Override
    public CoreTokens as(Table<?> alias) {
        return new CoreTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTokens rename(String name) {
        return new CoreTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTokens rename(Name name) {
        return new CoreTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoreTokens rename(Table<?> name) {
        return new CoreTokens(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, String, String, String, CoreTokensTokenType, String, Byte, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super CoreTokensTokenType, ? super String, ? super Byte, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super ULong, ? super ULong, ? super String, ? super String, ? super String, ? super CoreTokensTokenType, ? super String, ? super Byte, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
