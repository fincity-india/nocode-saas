/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.data.jooq.tables;


import com.fincity.saas.commons.jooq.convertor.JSONMysqlMapConvertor;
import com.fincity.saas.data.jooq.Data;
import com.fincity.saas.data.jooq.Keys;
import com.fincity.saas.data.jooq.enums.DataConnectionDbType;
import com.fincity.saas.data.jooq.tables.records.DataConnectionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataConnection extends TableImpl<DataConnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.data_connection</code>
     */
    public static final DataConnection DATA_CONNECTION = new DataConnection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataConnectionRecord> getRecordType() {
        return DataConnectionRecord.class;
    }

    /**
     * The column <code>data.data_connection.ID</code>. Primary key
     */
    public final TableField<DataConnectionRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>data.data_connection.CLIENT_CODE</code>. Client code
     */
    public final TableField<DataConnectionRecord, String> CLIENT_CODE = createField(DSL.name("CLIENT_CODE"), SQLDataType.CHAR(8).nullable(false), this, "Client code");

    /**
     * The column <code>data.data_connection.DB_NAME</code>. Name of the
     * database
     */
    public final TableField<DataConnectionRecord, String> DB_NAME = createField(DSL.name("DB_NAME"), SQLDataType.CHAR(64).nullable(false), this, "Name of the database");

    /**
     * The column <code>data.data_connection.DB_TYPE</code>. Data base type to
     * store the data
     */
    public final TableField<DataConnectionRecord, DataConnectionDbType> DB_TYPE = createField(DSL.name("DB_TYPE"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(com.fincity.saas.data.jooq.enums.DataConnectionDbType.class), this, "Data base type to store the data");

    /**
     * The column <code>data.data_connection.DB_CONNECTION</code>. JSON
     * connection details
     */
    public final TableField<DataConnectionRecord, Map> DB_CONNECTION = createField(DSL.name("DB_CONNECTION"), SQLDataType.JSON, this, "JSON connection details", new JSONMysqlMapConvertor());

    /**
     * The column <code>data.data_connection.DEFAULT_DB</code>. Default db
     * connection for all the data
     */
    public final TableField<DataConnectionRecord, UByte> DEFAULT_DB = createField(DSL.name("DEFAULT_DB"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINTUNSIGNED)), this, "Default db connection for all the data");

    /**
     * The column <code>data.data_connection.CREATED_BY</code>. ID of the user
     * who created this row
     */
    public final TableField<DataConnectionRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>data.data_connection.CREATED_AT</code>. Time when this
     * row is created
     */
    public final TableField<DataConnectionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is created");

    /**
     * The column <code>data.data_connection.UPDATED_BY</code>. ID of the user
     * who updated this row
     */
    public final TableField<DataConnectionRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>data.data_connection.UPDATED_AT</code>. Time when this
     * row is updated
     */
    public final TableField<DataConnectionRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is updated");

    private DataConnection(Name alias, Table<DataConnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataConnection(Name alias, Table<DataConnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.data_connection</code> table reference
     */
    public DataConnection(String alias) {
        this(DSL.name(alias), DATA_CONNECTION);
    }

    /**
     * Create an aliased <code>data.data_connection</code> table reference
     */
    public DataConnection(Name alias) {
        this(alias, DATA_CONNECTION);
    }

    /**
     * Create a <code>data.data_connection</code> table reference
     */
    public DataConnection() {
        this(DSL.name("data_connection"), null);
    }

    public <O extends Record> DataConnection(Table<O> child, ForeignKey<O, DataConnectionRecord> key) {
        super(child, key, DATA_CONNECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public Identity<DataConnectionRecord, ULong> getIdentity() {
        return (Identity<DataConnectionRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataConnectionRecord> getPrimaryKey() {
        return Keys.KEY_DATA_CONNECTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DataConnectionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DATA_CONNECTION_UK1_DATA_CONN);
    }

    @Override
    public DataConnection as(String alias) {
        return new DataConnection(DSL.name(alias), this);
    }

    @Override
    public DataConnection as(Name alias) {
        return new DataConnection(alias, this);
    }

    @Override
    public DataConnection as(Table<?> alias) {
        return new DataConnection(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataConnection rename(String name) {
        return new DataConnection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataConnection rename(Name name) {
        return new DataConnection(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataConnection rename(Table<?> name) {
        return new DataConnection(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<ULong, String, String, DataConnectionDbType, Map, UByte, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super ULong, ? super String, ? super String, ? super DataConnectionDbType, ? super Map, ? super UByte, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super ULong, ? super String, ? super String, ? super DataConnectionDbType, ? super Map, ? super UByte, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
