/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.data.jooq.tables.records;


import com.fincity.saas.data.jooq.tables.DataStorage;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataStorageRecord extends UpdatableRecordImpl<DataStorageRecord> implements Record12<ULong, String, String, String, String, String, Byte, Byte, ULong, LocalDateTime, ULong, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>data.data_storage.ID</code>. Primary key
     */
    public DataStorageRecord setId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.ID</code>. Primary key
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>data.data_storage.CLIENT_CODE</code>. Client code
     */
    public DataStorageRecord setClientCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.CLIENT_CODE</code>. Client code
     */
    public String getClientCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>data.data_storage.APP_CODE</code>. Application code
     */
    public DataStorageRecord setAppCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.APP_CODE</code>. Application code
     */
    public String getAppCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>data.data_storage.NAMESPACE</code>. Namespace
     */
    public DataStorageRecord setNamespace(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.NAMESPACE</code>. Namespace
     */
    public String getNamespace() {
        return (String) get(3);
    }

    /**
     * Setter for <code>data.data_storage.NAME</code>. Name
     */
    public DataStorageRecord setName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.NAME</code>. Name
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>data.data_storage.DB_NAME</code>. Database name where
     * the data is stored
     */
    public DataStorageRecord setDbName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.DB_NAME</code>. Database name where
     * the data is stored
     */
    public String getDbName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>data.data_storage.IS_VERSIONED</code>. Versioned if it
     * is true
     */
    public DataStorageRecord setIsVersioned(Byte value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.IS_VERSIONED</code>. Versioned if it
     * is true
     */
    public Byte getIsVersioned() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>data.data_storage.IS_AUDITED</code>. Audited if it is
     * true
     */
    public DataStorageRecord setIsAudited(Byte value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.IS_AUDITED</code>. Audited if it is
     * true
     */
    public Byte getIsAudited() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>data.data_storage.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public DataStorageRecord setCreatedBy(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.CREATED_BY</code>. ID of the user who
     * created this row
     */
    public ULong getCreatedBy() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>data.data_storage.CREATED_AT</code>. Time when this row
     * is created
     */
    public DataStorageRecord setCreatedAt(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.CREATED_AT</code>. Time when this row
     * is created
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>data.data_storage.UPDATED_BY</code>. ID of the user who
     * updated this row
     */
    public DataStorageRecord setUpdatedBy(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.UPDATED_BY</code>. ID of the user who
     * updated this row
     */
    public ULong getUpdatedBy() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>data.data_storage.UPDATED_AT</code>. Time when this row
     * is updated
     */
    public DataStorageRecord setUpdatedAt(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>data.data_storage.UPDATED_AT</code>. Time when this row
     * is updated
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<ULong, String, String, String, String, String, Byte, Byte, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<ULong, String, String, String, String, String, Byte, Byte, ULong, LocalDateTime, ULong, LocalDateTime> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<ULong> field1() {
        return DataStorage.DATA_STORAGE.ID;
    }

    @Override
    public Field<String> field2() {
        return DataStorage.DATA_STORAGE.CLIENT_CODE;
    }

    @Override
    public Field<String> field3() {
        return DataStorage.DATA_STORAGE.APP_CODE;
    }

    @Override
    public Field<String> field4() {
        return DataStorage.DATA_STORAGE.NAMESPACE;
    }

    @Override
    public Field<String> field5() {
        return DataStorage.DATA_STORAGE.NAME;
    }

    @Override
    public Field<String> field6() {
        return DataStorage.DATA_STORAGE.DB_NAME;
    }

    @Override
    public Field<Byte> field7() {
        return DataStorage.DATA_STORAGE.IS_VERSIONED;
    }

    @Override
    public Field<Byte> field8() {
        return DataStorage.DATA_STORAGE.IS_AUDITED;
    }

    @Override
    public Field<ULong> field9() {
        return DataStorage.DATA_STORAGE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return DataStorage.DATA_STORAGE.CREATED_AT;
    }

    @Override
    public Field<ULong> field11() {
        return DataStorage.DATA_STORAGE.UPDATED_BY;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return DataStorage.DATA_STORAGE.UPDATED_AT;
    }

    @Override
    public ULong component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getClientCode();
    }

    @Override
    public String component3() {
        return getAppCode();
    }

    @Override
    public String component4() {
        return getNamespace();
    }

    @Override
    public String component5() {
        return getName();
    }

    @Override
    public String component6() {
        return getDbName();
    }

    @Override
    public Byte component7() {
        return getIsVersioned();
    }

    @Override
    public Byte component8() {
        return getIsAudited();
    }

    @Override
    public ULong component9() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component10() {
        return getCreatedAt();
    }

    @Override
    public ULong component11() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime component12() {
        return getUpdatedAt();
    }

    @Override
    public ULong value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getClientCode();
    }

    @Override
    public String value3() {
        return getAppCode();
    }

    @Override
    public String value4() {
        return getNamespace();
    }

    @Override
    public String value5() {
        return getName();
    }

    @Override
    public String value6() {
        return getDbName();
    }

    @Override
    public Byte value7() {
        return getIsVersioned();
    }

    @Override
    public Byte value8() {
        return getIsAudited();
    }

    @Override
    public ULong value9() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value10() {
        return getCreatedAt();
    }

    @Override
    public ULong value11() {
        return getUpdatedBy();
    }

    @Override
    public LocalDateTime value12() {
        return getUpdatedAt();
    }

    @Override
    public DataStorageRecord value1(ULong value) {
        setId(value);
        return this;
    }

    @Override
    public DataStorageRecord value2(String value) {
        setClientCode(value);
        return this;
    }

    @Override
    public DataStorageRecord value3(String value) {
        setAppCode(value);
        return this;
    }

    @Override
    public DataStorageRecord value4(String value) {
        setNamespace(value);
        return this;
    }

    @Override
    public DataStorageRecord value5(String value) {
        setName(value);
        return this;
    }

    @Override
    public DataStorageRecord value6(String value) {
        setDbName(value);
        return this;
    }

    @Override
    public DataStorageRecord value7(Byte value) {
        setIsVersioned(value);
        return this;
    }

    @Override
    public DataStorageRecord value8(Byte value) {
        setIsAudited(value);
        return this;
    }

    @Override
    public DataStorageRecord value9(ULong value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public DataStorageRecord value10(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public DataStorageRecord value11(ULong value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public DataStorageRecord value12(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public DataStorageRecord values(ULong value1, String value2, String value3, String value4, String value5, String value6, Byte value7, Byte value8, ULong value9, LocalDateTime value10, ULong value11, LocalDateTime value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DataStorageRecord
     */
    public DataStorageRecord() {
        super(DataStorage.DATA_STORAGE);
    }

    /**
     * Create a detached, initialised DataStorageRecord
     */
    public DataStorageRecord(ULong id, String clientCode, String appCode, String namespace, String name, String dbName, Byte isVersioned, Byte isAudited, ULong createdBy, LocalDateTime createdAt, ULong updatedBy, LocalDateTime updatedAt) {
        super(DataStorage.DATA_STORAGE);

        setId(id);
        setClientCode(clientCode);
        setAppCode(appCode);
        setNamespace(namespace);
        setName(name);
        setDbName(dbName);
        setIsVersioned(isVersioned);
        setIsAudited(isAudited);
        setCreatedBy(createdBy);
        setCreatedAt(createdAt);
        setUpdatedBy(updatedBy);
        setUpdatedAt(updatedAt);
    }
}
