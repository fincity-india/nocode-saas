/*
 * This file is generated by jOOQ.
 */
package com.fincity.saas.data.jooq.tables;


import com.fincity.saas.data.jooq.Data;
import com.fincity.saas.data.jooq.Keys;
import com.fincity.saas.data.jooq.enums.DataStorageRefFieldRefType;
import com.fincity.saas.data.jooq.tables.records.DataStorageRefFieldRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataStorageRefField extends TableImpl<DataStorageRefFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.data_storage_ref_field</code>
     */
    public static final DataStorageRefField DATA_STORAGE_REF_FIELD = new DataStorageRefField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataStorageRefFieldRecord> getRecordType() {
        return DataStorageRefFieldRecord.class;
    }

    /**
     * The column <code>data.data_storage_ref_field.ID</code>. Primary key
     */
    public final TableField<DataStorageRefFieldRecord, ULong> ID = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "Primary key");

    /**
     * The column <code>data.data_storage_ref_field.STORAGE_FIELD_ID</code>.
     * Storage field id info
     */
    public final TableField<DataStorageRefFieldRecord, ULong> STORAGE_FIELD_ID = createField(DSL.name("STORAGE_FIELD_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Storage field id info");

    /**
     * The column <code>data.data_storage_ref_field.REF_STORAGE_ID</code>.
     * Storage reference
     */
    public final TableField<DataStorageRefFieldRecord, ULong> REF_STORAGE_ID = createField(DSL.name("REF_STORAGE_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "Storage reference");

    /**
     * The column <code>data.data_storage_ref_field.REF_TYPE</code>. Reference
     * type
     */
    public final TableField<DataStorageRefFieldRecord, DataStorageRefFieldRefType> REF_TYPE = createField(DSL.name("REF_TYPE"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("CASCADE", SQLDataType.VARCHAR)).asEnumDataType(com.fincity.saas.data.jooq.enums.DataStorageRefFieldRefType.class), this, "Reference type");

    /**
     * The column <code>data.data_storage_ref_field.CREATED_BY</code>. ID of the
     * user who created this row
     */
    public final TableField<DataStorageRefFieldRecord, ULong> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who created this row");

    /**
     * The column <code>data.data_storage_ref_field.CREATED_AT</code>. Time when
     * this row is created
     */
    public final TableField<DataStorageRefFieldRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is created");

    /**
     * The column <code>data.data_storage_ref_field.UPDATED_BY</code>. ID of the
     * user who updated this row
     */
    public final TableField<DataStorageRefFieldRecord, ULong> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.BIGINTUNSIGNED, this, "ID of the user who updated this row");

    /**
     * The column <code>data.data_storage_ref_field.UPDATED_AT</code>. Time when
     * this row is updated
     */
    public final TableField<DataStorageRefFieldRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "Time when this row is updated");

    private DataStorageRefField(Name alias, Table<DataStorageRefFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataStorageRefField(Name alias, Table<DataStorageRefFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.data_storage_ref_field</code> table
     * reference
     */
    public DataStorageRefField(String alias) {
        this(DSL.name(alias), DATA_STORAGE_REF_FIELD);
    }

    /**
     * Create an aliased <code>data.data_storage_ref_field</code> table
     * reference
     */
    public DataStorageRefField(Name alias) {
        this(alias, DATA_STORAGE_REF_FIELD);
    }

    /**
     * Create a <code>data.data_storage_ref_field</code> table reference
     */
    public DataStorageRefField() {
        this(DSL.name("data_storage_ref_field"), null);
    }

    public <O extends Record> DataStorageRefField(Table<O> child, ForeignKey<O, DataStorageRefFieldRecord> key) {
        super(child, key, DATA_STORAGE_REF_FIELD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Data.DATA;
    }

    @Override
    public Identity<DataStorageRefFieldRecord, ULong> getIdentity() {
        return (Identity<DataStorageRefFieldRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataStorageRefFieldRecord> getPrimaryKey() {
        return Keys.KEY_DATA_STORAGE_REF_FIELD_PRIMARY;
    }

    @Override
    public List<UniqueKey<DataStorageRefFieldRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DATA_STORAGE_REF_FIELD_UK1_DATA_STRG_REF_FLD);
    }

    @Override
    public List<ForeignKey<DataStorageRefFieldRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK1_STRG_REF_FLD_STRG_FLD_ID, Keys.FK1_STRG_REF_FLD_STRG_ID);
    }

    private transient DataStorageField _dataStorageField;
    private transient DataStorage _dataStorage;

    /**
     * Get the implicit join path to the <code>data.data_storage_field</code>
     * table.
     */
    public DataStorageField dataStorageField() {
        if (_dataStorageField == null)
            _dataStorageField = new DataStorageField(this, Keys.FK1_STRG_REF_FLD_STRG_FLD_ID);

        return _dataStorageField;
    }

    /**
     * Get the implicit join path to the <code>data.data_storage</code> table.
     */
    public DataStorage dataStorage() {
        if (_dataStorage == null)
            _dataStorage = new DataStorage(this, Keys.FK1_STRG_REF_FLD_STRG_ID);

        return _dataStorage;
    }

    @Override
    public DataStorageRefField as(String alias) {
        return new DataStorageRefField(DSL.name(alias), this);
    }

    @Override
    public DataStorageRefField as(Name alias) {
        return new DataStorageRefField(alias, this);
    }

    @Override
    public DataStorageRefField as(Table<?> alias) {
        return new DataStorageRefField(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataStorageRefField rename(String name) {
        return new DataStorageRefField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataStorageRefField rename(Name name) {
        return new DataStorageRefField(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataStorageRefField rename(Table<?> name) {
        return new DataStorageRefField(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<ULong, ULong, ULong, DataStorageRefFieldRefType, ULong, LocalDateTime, ULong, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super ULong, ? super ULong, ? super ULong, ? super DataStorageRefFieldRefType, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super ULong, ? super ULong, ? super ULong, ? super DataStorageRefFieldRefType, ? super ULong, ? super LocalDateTime, ? super ULong, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
